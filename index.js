URLS=[
"fnpcell/index.html",
"fnpcell/all/index.html",
"fnpcell/all/el/index.html",
"fnpcell/all/g/index.html",
"fnpcell/all/util/index.html",
"fnpcell/ansi/index.html",
"fnpcell/ansi/term.html",
"fnpcell/cell/index.html",
"fnpcell/cell/cell.html",
"fnpcell/cell/cell_array.html",
"fnpcell/interfaces.html",
"fnpcell/cell/cell_ref.html",
"fnpcell/cell/composite.html",
"fnpcell/cell/library.html",
"fnpcell/cell/metal_line.html",
"fnpcell/cell/pin.html",
"fnpcell/cell/port.html",
"fnpcell/cell/waveguide.html",
"fnpcell/compat.html",
"fnpcell/geometry/function_curve.html",
"fnpcell/geometry/curve_mixin.html",
"fnpcell/element/index.html",
"fnpcell/element/all.html",
"fnpcell/element/arc.html",
"fnpcell/element/box.html",
"fnpcell/element/circle.html",
"fnpcell/element/curve.html",
"fnpcell/element/curve_paint.html",
"fnpcell/element/dmtx_code.html",
"fnpcell/element/elliptical_arc.html",
"fnpcell/element/elliptical_ring.html",
"fnpcell/element/group.html",
"fnpcell/element/label.html",
"fnpcell/element/line.html",
"fnpcell/element/polygon.html",
"fnpcell/element/polygon_set.html",
"fnpcell/element/polyline.html",
"fnpcell/element/qr_code.html",
"fnpcell/element/rect.html",
"fnpcell/element/regular_polygon.html",
"fnpcell/element/ring.html",
"fnpcell/element/text.html",
"fnpcell/errors.html",
"fnpcell/fp.html",
"fnpcell/gdsii/index.html",
"fnpcell/gdsii/gds_importer.html",
"fnpcell/gdsii/gds_io.html",
"fnpcell/gdsii/gds_writer.html",
"fnpcell/geometry/index.html",
"fnpcell/geometry/arc.html",
"fnpcell/geometry/bezier.html",
"fnpcell/geometry/box.html",
"fnpcell/geometry/shape.html",
"fnpcell/geometry/circle.html",
"fnpcell/geometry/cosine_bend.html",
"fnpcell/geometry/elliptical_arc.html",
"fnpcell/geometry/elliptical_ring.html",
"fnpcell/geometry/euler_bend.html",
"fnpcell/geometry/euler_bend_function.html",
"fnpcell/geometry/hybrid_bend.html",
"fnpcell/geometry/line.html",
"fnpcell/geometry/path.html",
"fnpcell/geometry/polyline.html",
"fnpcell/geometry/rect.html",
"fnpcell/geometry/region.html",
"fnpcell/geometry/regular_polygon.html",
"fnpcell/geometry/ring.html",
"fnpcell/hash_code.html",
"fnpcell/internal/index.html",
"fnpcell/internal/plogic_util.html",
"fnpcell/internal/util/index.html",
"fnpcell/internal/util/binary_mask_util.html",
"fnpcell/internal/util/collection_util.html",
"fnpcell/internal/util/gds_util.html",
"fnpcell/internal/util/import_util.html",
"fnpcell/internal/util/layout_util.html",
"fnpcell/internal/util/lyp_util.html",
"fnpcell/internal/util/metrics_util.html",
"fnpcell/internal/util/np_util.html",
"fnpcell/internal/util/plot_util.html",
"fnpcell/internal/util/pure_compute.html",
"fnpcell/internal/util/ray_util.html",
"fnpcell/internal/util/source_deps.html",
"fnpcell/internal/util/spc_util.html",
"fnpcell/internal/util/statistics.html",
"fnpcell/internal/util/svrf_util.html",
"fnpcell/internal/util/terminal_util.html",
"fnpcell/internal/util/test_util.html",
"fnpcell/internal/util/time_util.html",
"fnpcell/internal/util/waypoint_util.html",
"fnpcell/internal/util/weakref_util.html",
"fnpcell/mixin/index.html",
"fnpcell/mixin/transform_mixin.html",
"fnpcell/netlist/index.html",
"fnpcell/netlist/spc_writer.html",
"fnpcell/pdk/index.html",
"fnpcell/pdk/classconst.html",
"fnpcell/pdk/collection.html",
"fnpcell/pdk/connected.html",
"fnpcell/pdk/const_property.html",
"fnpcell/pdk/create_links.html",
"fnpcell/pdk/linked.html",
"fnpcell/pdk/link_between/index.html",
"fnpcell/pdk/link_between/flyline.html",
"fnpcell/pdk/link_between/metal.html",
"fnpcell/pdk/link_between/wg.html",
"fnpcell/pdk/link_smooth.html",
"fnpcell/pdk/named_const.html",
"fnpcell/pdk/pcell.html",
"fnpcell/pdk/pcell_class.html",
"fnpcell/pdk/pcell_interfaces.html",
"fnpcell/pdk/pcell_meta.html",
"fnpcell/pdk/pcell_params.html",
"fnpcell/pdk/pcell_runtime.html",
"fnpcell/pdk/place.html",
"fnpcell/pdk/reexport.html",
"fnpcell/pdk/route.html",
"fnpcell/pdk/staticconst.html",
"fnpcell/pdk/technology/index.html",
"fnpcell/pdk/technology/all/index.html",
"fnpcell/pdk/technology/auto_link.html",
"fnpcell/pdk/technology/auto_metal_line_type.html",
"fnpcell/pdk/technology/auto_transition.html",
"fnpcell/pdk/technology/auto_vias.html",
"fnpcell/pdk/technology/bands.html",
"fnpcell/pdk/technology/cd_bias.html",
"fnpcell/pdk/technology/display.html",
"fnpcell/pdk/technology/gds_font.html",
"fnpcell/pdk/technology/interfaces.html",
"fnpcell/pdk/technology/layers.html",
"fnpcell/pdk/technology/link_between.html",
"fnpcell/pdk/technology/metal.html",
"fnpcell/pdk/technology/metal_stack.html",
"fnpcell/pdk/technology/registry.html",
"fnpcell/pdk/technology/tech.html",
"fnpcell/pdk/technology/wg.html",
"fnpcell/polyfill.html",
"fnpcell/processors/index.html",
"fnpcell/processors/matplotlib_shower.html",
"fnpcell/processors/port_owner_checker.html",
"fnpcell/resource.html",
"fnpcell/transform.html",
"fnpcell/unique_meta.html"
];
INDEX=[
{
"ref":"fnpcell",
"url":0,
"doc":" Functional Parameterized Cell PhotoCAD is a computer-aided design platform for photonic integrated circuit layout design based on Python language. The PhotoCAD platform includes two tools-pPCell, or photonic PCell and pLink, or photonic Link, which correspond to the parametric device layout design and the circuit-level layout design of the photonic integrated circuit layout design. PhotoCAD is written in Python language, which is widely used in the industry. The algorithm for generating layouts has been carefully researched and specially optimized by photonic integrated circuit designers. It has unique advantages among similar tools worldwide, such as no distortion of layout at any angle, tearing and other issues. pPCell is a tool for parametric component layout design in the PhotoCAD platform. It covers the common active and passive components in current photonic integrated chips. The waveguide used in the components covers FWG (Full etch waveguide) and MWG (Medium etch waveguide), and SWG (Shallow etch waveguide) types. In pPcell, all parameterized components (i.e. Parameterized Cell, PCell) are defined in the function through Python scripts, and the user can flexibly adjust the parameters in the function to achieve a specific cell when calling and using it in a component layout design. pLink is a tool for automatic component interconnection design in the PhotoCAD platform. In addition to instantiating the components and setting the placement of the components in the script, the user can also use pLink to complete the automatic interconnection design of the components through a simple port connection definition. pLink will call the corresponding waveguide transition unit according to the waveguide type of the component port to realize the transition of the waveguide type at the port, and instantiate the corresponding straight and bend waveguides to complete the connection between the component ports according to the position of the component port.  Changelog   Version 1.4.8 (2022-8-26)               - minor updates Version 1.4.7 (2022-8-22)               -  Pin /  Port change:  disabled property Version 1.4.6 (2022-8-16)               - minor SDL enhancements - bugfix(polygon max points) -  fp.el.Rect support  bottom_left and  center , deprecating  origin - minor internal changes Version 1.4.5 (2022-7-18)               - minor SDL enhancements Version 1.4.4 (2022-6-30)               - bugfixes Version 1.4.3 (2022-6-27)               - fp.el.Label supports  anchor parameter to align label from start, center or end. - fp.el.Rect supports zero for  corner_radius parameter. Assign it to [0, 10, 0, 0] will result a rectangle with bottom-left corner rounded. - bugfixes Version 1.4.2 (2022-6-24)               - minor fixes Version 1.4.1 (2022-6-24)               - minor fixes Version 1.4.0 (2022-6-1)               -  fp.place to place a device with specific port at target position and right orientation -  fp.LinkSmooth ,  fp.LinkBetween \uff0c  fp.create_links and  fp.Linked added an optional  straight_factory parameter to customize generated straight waveguide -  fp.LinkBetwween and  fp.create_links using parameter  metal_line_type instead of  vias and new parameter  (metal_)fitting_function is added -  IWaveguideType requires an additional field  straight_factory which point to a default straight factory for that waveguide type -  fp.export_gds support  auto_flatten=True parameter,  False value will disable auto flattening which will run faster but will be under risk of 1nm gap -  fp.Waveguide added new  offset and  final_offset parameter -  fp.Waveguide is replaced by  waveguide_type(curve=some_curve, offset=0, final_offset=None)  Breaking Change -  fp.Pin using parameter  metal_line_type instead of  layer  Breaking Change -  fp.export_pls added to support pLogic sdl/lds -  fp.Timing removed  Breaking Change -  fp.import_from_json supports both  layer and  metal_line_type for pin definition in json file -  fp.g.Rect and  fp.el.Rect add  corner_radius parameter -  fp.util.collect_deps for source file dependencies - Using  logging instead of  print -  fp.Port and  fp.Pin accept optional  shape parameter - bands annotation fix - minor fixes Version 1.3.0 (2021-12-24)               -  LinkBetween ,  Linked and  create_links now use  bend_factory instead of  bend_type and  auto_bend .  Breaking Change -  Path.smooth now prefer  IBendCurveFactory ( bend_factory parameter) instead of  IBendFactory ( bend parameter).  IBendFactory ( bend parameter) is deprecated. -  fp.IBendFactory is deprecated, use  fp.IBendCurveFactory and  fp.IBendWaveguideFactory instead. -  fp.g.Curve renamed to  fp.g.FunctionCurve  Breaking Change -  IAffineTransformable.rotated support new  inplace=True parameter which rotate element at its own origin. -  fp.g.Circle ,  fp.g.Ring ,  fp.el.Circle ,  fp.el.Ring is added -  fp.el.QRCode and  fp.el.DataMatrixCode is added - Compatibility: most removing/deprecated features can be kept by importing  fnpcell.compat after 'from fnpcell import all' -  fp.g.Ring ,  fp.el.Ring ,  fp.g.EllipticalRing and  fp.el.EllipticalRing supports pair form angle parameter now, eg.  initial_radians=(outer, inner) -  fp.export_lyp added a  name_format parameter to support layer name customization -  LayerFill ,  LayerStroke ,  LayerStyle ,  LayerStyleSet ,  Color ,  NamedColor ,  FillPattern added in  fnpcell.pdk.technology.display -  fnpcell.element.Polyline use  end_hints instead of multiple value  width to align ends -  fp.el.CurvePaint and  fp.ICurvedCellRef added to simplify curve related drawing -  fp.IWaveguide renamed to  fp.IWaveguideLike -  fp.Linked and  fp.LinkBetween for waveguide are reimplemented using  fp.LinkSmooth and length-matching support most 180-turn case. -  fp.LinkSmooth supports  target_length for route with 180-turn case. -  fpt.AutoTransition updated and requires factories returning transition and port names.  Breaking Change -  fp.IBendWaveguideFactory returns bend waveguide and port names.  fpt.LinkingPolicy and  fp.LinkSmooth is updated.  Breaking Change - polygon boolean performance update - gdsii font support:  GDSFontMeta - bugfixes Version 1.2.0 (2021-11-10)               -  fp.g.Region ,  fp.el.PolygonSet and  ICellRef.polygon_set () are added to enable boolean operations on polygons and layers, see gpdk examples -  LinkBetween ,  Linked and  create_links will generate  FlylineWarning at the same time generating a flyline polygon, and can be turned to an error using  warnings.simplefilter () -  fp.import_from_gds () supports a  ports parameter and returns  ICellRef now.  Breaking Change Old code need a  .cell to get the cell -  fp.import_from_json () supports a  default_layers parameter to provide common layer mappings. -  fp.UnknownLayer for importing external gds file - bugfix for importing  PATH element from gdsii file - polyfill for python dataclasses bug( replace vs  InitVar ) Version 1.1.1 (2021-11-1)               -  grow is deprecated, use  offsetted instead. (Naming change) - performance tuning - license control Version 1.1.0 (2021-10-29)               -  frozen = True (was  final = True in v1.0.0) in class parameters to make class final(cannot be inherited) -  fp.Param () support  frozen = True (was  final = True in v1.0.0) to make parameter final in subclass(cannot pass value by user, cannot redefine, cannot override  _default_xxx method) -  register_technology () and  get_technology () supports  warnings = False to suppress warnings such as \"not subclass of gpdk's technology\" etc. - supporting simplified pcell class definition by providing IDE lesser typing info - including api docs within the whl Version 1.0.0 (2021-10-27)               -  final = True in class parameters to make class final(cannot be inherited) -  fp.Param () support  final = True to make parameter final in subclass(cannot pass value by user, cannot redefine, cannot override  _default_xxx method) -  grow () for  IShape and  ICurve -  fp.statistics() for collecting build time for each pcell, see gpdk/examples/example_demultiplexer2.py -  fp.Timing() for timing code block, see gpdk/examples/example_demultiplexer2.py -  TECH.DEVICE.band_annotation is called with  ICell instead of  ICellRef Version 0.5.7 (2021-10-20)               - minor update for documentation support - minor bugfixes Version 0.5.6 (2021-10-13)               -  fp.angle_between and  fp.distance_between are vectorized now.  python p1 = [(4, 3), (5, 5)] p0 = [(0, 0), (1, 2)] angles = fp.angle_between(p1, p0) print(angles)  result: [0.64350111 0.64350111] distances = fp.distance_between(p1, p0) print(distances)  result: [5., 5.]  - add  fp.create_links which works like  fp.Linked except that  fp.create_links returns only a tuple of links it created. -  immutable =True in  MappingParam and  ListParam convert  Mapping ,  Set and  Sequence to immutable  FrozenDict ,  frozenset and  Tuple recursively. Version 0.5.5 (2021-10-9)               -  ListParam () and  MappingParam () now default use  immutable = False instead of  mutable = True.  Breaking change -  register_technology () returns getter for  TECH now (returns  TECH proxy before). see gpdk.  Breaking change -  get_bounding_box now supports  exclude_layers to filter out layers such as  TECH.LAYER.PINREC_NOTE -  band parameter in  pcell /  pcell_class supports string value now, for example:  @fp.pcell_class(band=[\"C\", \"O\"]) , raises  LookupError if invalid - deprecate  filename parameter in  export_gds () /  export_spc (), use  file parameter instead. (will be removed in 0.5.6) - deprecate  gds_path parameter in  import_from_gds , use  gds_file parameter instead. (will be removed in 0.5.6) - deprecate  fp.auto_export () decorator. (will be removed in 0.5.6) -  gds_filename ,  filename in  generate_svrf () rename to  gds_path ,  file .  Breaking change -  filename in  export_lyp () rename to  file .  Breaking change -  auto_close parameter in  GDSWriter and  SPICEWriter is removed.  Breaking change -  styled in  fnpcell.ansi.term is removed, use  style instead.  Breaking change - aggressive caching / performance tuning - documents support  Search for method / class Version 0.5.4 (2021-9-29)               -  DeviceParam support  pin_count which restrict the number of pins of device -  import_gds parameter  cell_name is optional now. Raise  LookupError if gds file contains multiple cell and  cell_name is not provided -  import_gds filter duplicate polygons in same cell since they are identity and one is enough -  ListParam () and  MappingParam () now has  mutable = True by default Version 0.5.3 (2021-9-27)               -  InstanceSet ,  ElementSet and  PortSet with methods added: . first () and . last () which returns first/last inserted item, raises LookupError if empty -  InstanceSet ,  ElementSet and  PortSet raises ValueError when inserting with duplicate keys - content property of  InstanceSet ,  ElementSet and  PortSet rename to _content so private - Add some cache for  PCell . build , and realign gds output with functional pcell -  Port and  Pin have . x / . y readonly properties which are shortcut for . position [0] / . position [1] - Documentation infrastructure improvement Version 0.5.2 (2021-9-22)               - move  CircularBendFactory to fnpcell.technology.bend_factory.circular_bend_factory - move  EulerBendFactory to fnpcell.technology.bend_factory.euler_bend_factory - RADIUS parameter in  CircularBendFactory renamed to radius - RADIUS_MIN, P and L_MAX parameter in  CircularBendFactory renamed to radius_min, p, l_max - metal  LinkBetween bugfix: vias overlapping area too big -  MappingParam automatic convert dict to  FrozenDict to make it hashable by default, this behavior can be disabled by setting mutable=True on  MappingParam -  LinkBetween and  LinkSmooth implements  ICurveLike which provides one method: curve_length - subclassing dataclass form pcell don't need .dataclass() now, see gpdk/examples/example_pcell_dataclass.py -  InstanceSet now supports new syntax:  python instSet2 = fp.InstanceSet() insts += inst, \"key\" inst = insts[\"key\"] inst = insts.get(\"key\", default=None) instSet2 = fp.InstanceSet() instSet2 += insts inst = instSet2[\"key\"] instDict = { \"key2\": inst2 } instSet2 += instDict inst2 = instSet2[\"key2\"]  - strong typing: now pass the pyright strict typing with 5 exceptions:  toml reportImportCycles = \"none\"  import in factory method still reported as cycles reportIncompatibleMethodOverride = \"none\"  override property with @property method reportIncompatibleVariableOverride = \"none\"  override property with @property method reportMissingTypeStubs = \"none\"  native dependencies such as shapely reportUnusedImport = \"none\"  reexport  Version 0.5.1 (2021-9-18)               - bugfix(edge case in metal linkBetween) - typing fix for older vscode python extension Version 0.5.0 (2021-9-17)               - XXXParam.as_field() supports repr, hash and compare parameters now - XXXParam() supports preprocessor which is called with the user-given argument value, if it returns None then default value is used - FloatParam family and IntParam family now supports precision which will restrict argument value to multples of the precision - ICell.new_array() is now with default values: cols=1, col_width=0, rows=1, row_height=0 - ICurve.subcurve() now accept negative start/end which equals to curve_length - abs(start) or curve_length - abs(end) - WaveguideType, MetalLineType, MetalLineStyle parameters renamed - DESIGN_CORE_WIDTH => core_design_width, FORCE_CORE_WIDTH => core_layout_width, CORE_BIAS => core_bias  . - LINE_WIDTH => line_width, FORCE_LINE_STYLE => line_layout_style,  . - STUB_WIDTH => stub_width - New bool stub_right_angle(default to False) parameter to MetalLineStyle. - export_gds now supports layer_mapper parameter - import_gds layer_mapper callable now accept a single Tuple[int, int] argument instead of two (layer:int, datatype:int) - bugfix(dataclass pcell name default bug,  .) Version 0.4.9 (2021-9-14)               - AutoVias now returns a vias factory instead of the direct result - bugfix Version 0.4.8 (2021-9-13)               - dataclass pcell: use try block to prevent errors break the default value resolution Version 0.4.7 (2021-9-13)               - IOwnedTerminal.repositioned(at= .) now accept IPin/IPort, rotate and translate the owner of the terminal, return repositioned(and rotated if both are IOwnedPort) terminal - dataclass pcell: validate at last _default_xxx run, fix the validate too early bug Version 0.4.6 (2021-9-13)               - SlotMetalLineType moved from fnpcell to gpdk - dataclass pcell _default_xxx method will be call multiple times to prevent dependency problem - extract IMetalLineStyle from IMetalLineType - technology: AutoVia, AutoMetalLineType Version 0.4.5 (2021-9-10)               - orientation of port label is now only in multiples of PI/2 - CoreCladdingWaveguideType moved to gpdk - removes defer_default in fp.XXXParam, for dataclass pcell it is True by default - bugfix - remove fp.with_parameters as dataclass pcell don't need it Version 0.4.4 (2021-9-9)               - fp.XXXParam supports defer_default and default_factory, which enable the _default_xxx pattern to provide default value to parameters in dataclass pcell Version 0.4.3 (2021-9-7)               - ICurve.subcurve() returns a subcurve from start(in curve length) to end(in curve length) - ICurve.sample_at() returns sample info(position, orientation, length) at position(in curve length) - SmoothLink() deprecated, use LinkSmooth() instead to align name convention with LinkBetween() Version 0.4.2 (2021-9-4)               - fnpcell.ansi.term supports color print, used by gpdk/util/check_requirements.py Version 0.4.1 (2021-9-3)               - supports dataclass form pcell with frozen=False - support hidden port, eg. ports=[\"op_0\", fp.Hidden(\"op_1\")] Version 0.4.0 (2021-9-1)               - Path.smooth weird orientation(when last point is too close to bend end) bugfix Version 0.3.9 (2021-8-31)               - Affine2D.transform_angle bugfix Version 0.3.8 (2021-8-31)               - fp.SmoothLink() see gpdk example_smooth_link for details - fp.pcell_class and fp.PCell to support dataclass form of pcell, see gpdk example_pcell, example_pcell_dataclass for details Version 0.3.7 (2021-8-28)               - change fp.g.Path(start_at=(x, y to fp.g.Path.move(to=(x, y , so we can use fp.g.Path.smooth() instead of importing fnpcell.elements.Path - Path.smooth bugfix Version 0.3.6 (2021-8-25)               - pyi fix Version 0.3.5 (2021-8-24)               - fnpcell.incubator: Linked/LinkBetween for metal line Version 0.3.4 (2021-8-23)               - bugfix Version 0.3.3 (2021-8-22)               - bugfix Version 0.3.2 (2021-8-22)               - new methods: - curve.rail: generate parallel curve like rail - curve.bundle: generate many parallel curve with equal spacing Version 0.3.1 (2021-8-21)               - Linked links accepts LinkBetween and pattern dc[\"op_0\"] >> fp.Waypoint(0, 0, 90) >> dc[\"op_1\"] now - LinkBetween supports waypoints parameter now Version 0.3.0 (2021-8-21)               - LinkBetween in Linked Version 0.2.8 (2021-8-20)               - export_spc supports components parameter Version 0.2.7 (2021-8-19)               - typing infrastructure enhancement Version 0.2.6 (2021-8-18)               - bugfix Version 0.2.5 (2021-8-17)               - bugfix Version 0.2.4 (2021-8-17)               - bugfix Version 0.2.3 (2021-8-17)               - bugfix Version 0.2.2 (2021-8-16)               - fp.el.Label supports font, font_size, baseline parameters - typing fix - bugfix Version 0.2.1 (2021-8-9)               - bugfix and dependencies update Version 0.2.0 (2021-8-5)               - fp.MetalLine, fp.SlotMetalLineType Version 0.1.9 (2021-8-2)               - bugfix Version 0.1.8 (2021-7-27)               - bugfix Version 0.1.7 (2021-7-25)               - bugfix Version 0.1.6 (2021-7-20)               - port based transform methods, see gpdk/examples/example_port_transform.py - Linked() supports FLYLINE_MARK Version 0.1.5 (2021-7-2)               - \u5185\u90e8\u6539\u8fdb Version 0.1.4 (2021-6-30)               - svrf\u652f\u6301 - \u5185\u90e8\u6539\u8fdb Misc   - CD Bias: \u5bf9\u4e8e double slot \u7684 Waveguide\uff0c\u8be5\u5982\u4f55\u8ba1\u7b97\uff1f - \u5df2\u77e5\u95ee\u9898\uff1a - CellRef \u5e73\u79fb\u820d\u5165\u5bfc\u81f4 1nm gap, - (0.3 + 0.3) = 0.6 => 1 - (0.3 + 0.3) => (0.0 + 0.0) = 0 - \u5947\u6570 grid \u5bbd\u5ea6\u5bfc\u81f4 1nm gap Version 0.1.3 (2021-6-14)               - fp.import_from_json() Misc   - CD Bias: \u5bf9\u4e8e double slot \u7684 Waveguide\uff0c\u8be5\u5982\u4f55\u8ba1\u7b97\uff1f - \u5df2\u77e5\u95ee\u9898\uff1a - CellRef \u5e73\u79fb\u820d\u5165\u5bfc\u81f4 1nm gap, - (0.3 + 0.3) = 0.6 => 1 - (0.3 + 0.3) => (0.0 + 0.0) = 0 - \u5947\u6570 grid \u5bbd\u5ea6\u5bfc\u81f4 1nm gap Version 0.1.2 (2021-6-1)               - fp.PortSet() - bend_type for fp.Linked - supports for PINREC_FWG, PINREC_SWG, PINREC_MWG, PINREC_TEXT Compatibility Notes          - - \u79fb\u9664 fp.DeviceBuilder \u548c example_builder.py Misc   - CD Bias: \u5bf9\u4e8e double slot \u7684 Waveguide\uff0c\u8be5\u5982\u4f55\u8ba1\u7b97\uff1f - \u5df2\u77e5\u95ee\u9898\uff1a - CellRef \u5e73\u79fb\u820d\u5165\u5bfc\u81f4 1nm gap, - (0.3 + 0.3) = 0.6 => 1 - (0.3 + 0.3) => (0.0 + 0.0) = 0 - \u5947\u6570 grid \u5bbd\u5ea6\u5bfc\u81f4 1nm gap Version 0.1.1 (2021-5-10)               - fp.pcell \u652f\u6301 band \u53c2\u6570 - fp.InstanceSet, fp.ElementSet - fp.Linked \u652f\u6301 link_type \u53c2\u6570 - fp.DeviceBuilder Version 0.1.0 (2021-4-26)               - fp.g.EulerBend \u652f\u6301 l_max \u53c2\u6570 - export_lyp \u4fee\u590d - IWaveguideType \u652f\u6301 BAND - \u521d\u6b65\u652f\u6301 AutoLink\uff1a fp.Linked Version 0.0.9 (2021-4-14)               - \u51e0\u4f55\u66f2\u7ebf\u548c\u5f62\u72b6 g.Bezier, g.EulerBend \u548c g.Path\u3002 g.Path \u7528\u4e8e\u7ec4\u5408\u591a\u6bb5\u66f2\u7ebf - \u63d0\u4f9b AutoTransition \u652f\u6301 - export_gds \u66f4\u6613\u4f7f\u7528 - \u4ee3\u7801\u5e93\u8fdb\u884c\u4e86\u7cbe\u7b80 Version 0.0.8 (2021-3-31)               - \u51e0\u4f55\u66f2\u7ebf\u548c\u5f62\u72b6 g.Box, g.EllipticalArc, g.EllipticalRing, g.Line, g.Rect, g.RegularPolygon, g.SArc, g.Shape\uff0c\u66f2\u7ebf\u7684\u57fa\u7c7b\u662f g.Curve - el.Box, el.EllipticalArc, el.EllipticalRing, el.Line, el.Rect, el.RegularPolygon, el.SArc \u652f\u6301 origin \u53c2\u6570\uff0ceg. origin=(0, 0) - el.Text, el.Label \u652f\u6301 at \u53c2\u6570\uff0ceg. at=(0, 0) or at=port_0 - CoreCladdingWaveguideType - Waveguide(name, type, curve, ports) - import_from_gds \u9ed8\u8ba4\u4f1a\u4f7f\u7528 TECH.LAYER \u6765\u6620\u5c04 - technology \u8c03\u6574\uff0c\u5bf9\u4fee\u6539\u66f4\u53cb\u597d\u4e86 - \u652f\u6301 TECH.PORT.OFFSET \u8bbe\u7f6e\u4e0d\u540c\u503c Version 0.0.7 (2021-3-18)               - \u4fee\u590d cython pickling bug \u5bfc\u81f4\u591a\u8fdb\u7a0b\u6784\u5efa\u6b7b\u9501\u7684\u95ee\u9898 - \u5b9e\u9a8c\u6027\u652f\u6301\u5bfc\u51fa netlist Version 0.0.6 (2021-3-17)               - pcell \u56fa\u5b9a\u53c2\u6570\u5b9a\u4e49\u548c\u8fd4\u56de\u7ed3\u6784 - \u5b9e\u9a8c\u6027\u652f\u6301 ParalellExecution \u591a\u8fdb\u7a0b\u6784\u5efa pcell - \u589e\u52a0  with Resource( .) as io:  \u7528\u4e8e\u7b80\u5316\u8bfb\u53d6\u548c\u5199\u5165\u6587\u4ef6\u7684\u64cd\u4f5c - \u66f4\u597d\u7684\u652f\u6301\u5bfc\u5165 .gds \u6587\u4ef6\u4e2d\u7684 cell - DeviceParam \u652f\u6301 type \u53c2\u6570\uff0c\u9650\u5b9a\u80fd\u4f20\u5165\u7684 Device \u7684\u7c7b\u578b - \u589e\u52a0 h_mirror\uff08\u5de6\u53f3\u955c\u50cf\uff09, v_mirror\uff08\u4e0a\u4e0b\u955c\u50cf\uff09, c_mirror\uff08\u4e2d\u5fc3\u955c\u50cf\uff09 \u65b9\u6cd5 - \u4f18\u5316 .gds \u5bfc\u51fa\u7684 cell \u540d\u79f0\uff0c\u73b0\u5728\u91cd\u590d\u7684\u540d\u79f0\u4f1a\u6dfb\u52a0\u7b80\u77ed\u7684\u540e\u7f00 - \u4f18\u5316\u6a21\u5757\u5bfc\u5165\uff0c\u73b0\u5728\u53ea\u9700 from fnpcell import all as fp Version 0.0.5 (2021-3-11)               - pcell2\uff0c \u652f\u6301\u65b0\u53c2\u6570\u5b9a\u4e49\u65b9\u5f0f Version 0.0.4 (2021-3-10)               - \u5185\u90e8\u4f18\u5316 Version 0.0.3 (2021-3-8)               - CD Bias \u73b0\u5728\u652f\u6301linear_cd_bias([(0.4, 0.1), (0.6, 0.15), (0.8, 0.2)])\u65b9\u5f0f - \u7b80\u5316pdk\u63a5\u53e3\uff0cGPDK\u6240\u6709\u5f00\u53d1\u6240\u9700\u7686\u7531fnpcell.neo.pdk\u548cfnpcell.neo.pdk.technology\u5bfc\u5165 - \u7b80\u5316Component\u5f00\u53d1\uff0c\u73b0\u5728\u53ef\u7528\u56de\u7b80\u5355\u7684\u51fd\u6570\u6765\u751f\u6210pcell\u4e86 Version 0.0.2 (2021-2-25)               - CD Bias \u521d\u6b65\u652f\u6301 - \u5176\u4ed6\u5185\u90e8\u4f18\u5316  "
},
{
"ref":"fnpcell.all",
"url":1,
"doc":"reexport classes and functions to public"
},
{
"ref":"fnpcell.all.el",
"url":2,
"doc":"el for element"
},
{
"ref":"fnpcell.all.g",
"url":3,
"doc":"g for geometry."
},
{
"ref":"fnpcell.all.util",
"url":4,
"doc":""
},
{
"ref":"fnpcell.ansi",
"url":5,
"doc":""
},
{
"ref":"fnpcell.ansi.term",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color",
"url":6,
"doc":"An enumeration."
},
{
"ref":"fnpcell.ansi.term.Color.DEFAULT",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.BLACK",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.RED",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.GREEN",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.YELLOW",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.BLUE",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.MAGENTA",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.CYAN",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.LIGHT_GRAY",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.DARK_GRAY",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.LIGHT_RED",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.LIGHT_GREEN",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.LIGHT_YELLOW",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.LIGHT_BLUE",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.LIGHT_MAGENTA",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.LIGHT_CYAN",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.Color.WHITE",
"url":6,
"doc":""
},
{
"ref":"fnpcell.ansi.term.style",
"url":6,
"doc":"",
"func":1
},
{
"ref":"fnpcell.ansi.term.print_ansi",
"url":6,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell",
"url":7,
"doc":""
},
{
"ref":"fnpcell.cell.cell",
"url":8,
"doc":""
},
{
"ref":"fnpcell.cell.cell.Cell",
"url":8,
"doc":"Cell is for defining a cell with name content and ports. Any modification will create new cell instead of modify the original cell. A cell is a composite with ports."
},
{
"ref":"fnpcell.cell.cell.Cell.content",
"url":8,
"doc":""
},
{
"ref":"fnpcell.cell.cell.Cell.ports",
"url":8,
"doc":""
},
{
"ref":"fnpcell.cell.cell.Cell.bands",
"url":8,
"doc":""
},
{
"ref":"fnpcell.cell.cell.Cell.name",
"url":8,
"doc":""
},
{
"ref":"fnpcell.cell.cell.Cell.with_content",
"url":8,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell.cell.Cell.with_patches",
"url":8,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell.cell.Cell.with_ports",
"url":8,
"doc":"Return a new cell with the given ports",
"func":1
},
{
"ref":"fnpcell.cell.cell_array",
"url":9,
"doc":""
},
{
"ref":"fnpcell.cell.cell_array.CellArray",
"url":9,
"doc":"CellArray is for defining a n m Cell Array. Any modification will create new CellArray instead of modify the original CellArray."
},
{
"ref":"fnpcell.cell.cell_array.CellArray.cell",
"url":9,
"doc":""
},
{
"ref":"fnpcell.cell.cell_array.CellArray.cols",
"url":9,
"doc":""
},
{
"ref":"fnpcell.cell.cell_array.CellArray.col_end",
"url":9,
"doc":""
},
{
"ref":"fnpcell.cell.cell_array.CellArray.rows",
"url":9,
"doc":""
},
{
"ref":"fnpcell.cell.cell_array.CellArray.row_end",
"url":9,
"doc":""
},
{
"ref":"fnpcell.cell.cell_array.CellArray.transform",
"url":9,
"doc":""
},
{
"ref":"fnpcell.cell.cell_array.CellArray.decompose",
"url":9,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.polygon_set",
"url":9,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.run",
"url":9,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.orthogonal",
"url":9,
"doc":"Return a cols rows cell array.",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.cell_array.CellArray.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref",
"url":11,
"doc":""
},
{
"ref":"fnpcell.cell.cell_ref.create_cell_ref",
"url":11,
"doc":"Create a cell reference to a cell generated from name, content and ports Usage:   from fnpcell import all as fp from gpdk.technology import get_technology if __name__  \"__main__\": from pathlib import Path gds_file = Path(__file__).parent / \"local\" / Path(__file__).with_suffix(\".gds\").name library = fp.Library() TECH = get_technology()                                     =  fmt: off device = fp.Device(content=[fp.el.Line(length=10, stroke_width=2, layer=TECH.LAYER.MT_DRW)], ports=[]) library += device  fmt: on                                = fp.export_gds(library, file=gds_file)  fp.plot(library)  ",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.create_curved_cell_ref",
"url":11,
"doc":"Create a cell reference to a cell generated from name, content and ports Usage:   from fnpcell import all as fp from gpdk.technology import get_technology if __name__  \"__main__\": from pathlib import Path gds_file = Path(__file__).parent / \"local\" / Path(__file__).with_suffix(\".gds\").name library = fp.Library() TECH = get_technology()                                     =  fmt: off device = fp.CurvedDevice( curve=fp.g.line(length=10), content=[ fp.el.Line( length=10, stroke_width=2, layer=TECH.LAYER.MT_DRW, ), ], ports=[], ) library += device  fmt: on                                = fp.export_gds(library, file=gds_file)  fp.plot(library)  ",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.new_cell_ref",
"url":11,
"doc":"Return a cell's reference.",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef",
"url":11,
"doc":"Define Cell Reference."
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.cell",
"url":11,
"doc":""
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.transform",
"url":11,
"doc":""
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.updated",
"url":11,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.ports",
"url":11,
"doc":"Return owned ports of the cell reference."
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.flatten",
"url":11,
"doc":"Return a new cell reference with transformed content and identity transform to itself. Useful to fix the \"1nm gap\" due to gds spec This method only flatten one level, not recursively flatten all content. Examples: >>> new_device = device.flatten()",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.transform_combined",
"url":11,
"doc":"Return a new cell reference with a new transform which is its transform combined with the given transform",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.run",
"url":11,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.content_merged",
"url":11,
"doc":"Return a new cell reference with close elements on same layer merged into polygons. Multiple layers can be provided and elements on each layer will be merged into polygons seperately. examples: >>> new_device = device.content_merged(affected_layer=TECH.LAYER.FWG_CORE) >>> new_device = device.content_merged(affected_layer=[TECH.LAYER.FWG_CORE, TECH.LAYER.SWG_CORE])",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.polygon_set",
"url":11,
"doc":"",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.new_array",
"url":11,
"doc":"Return a new cell reference array",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.cell_ref.CellRef.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.composite",
"url":12,
"doc":""
},
{
"ref":"fnpcell.cell.composite.new_composite",
"url":12,
"doc":"Create a composite of elements.",
"func":1
},
{
"ref":"fnpcell.cell.composite.Composite",
"url":12,
"doc":"Composite is for defining a Composite with content. Composite is a collection of elements, just like Group is a collection of primitives (primitive is polygon with layer)."
},
{
"ref":"fnpcell.cell.composite.Composite.content",
"url":12,
"doc":""
},
{
"ref":"fnpcell.cell.composite.Composite.transform",
"url":12,
"doc":""
},
{
"ref":"fnpcell.cell.composite.Composite.with_ports",
"url":12,
"doc":"Create a cell with the given ports from the composite's content.",
"func":1
},
{
"ref":"fnpcell.cell.composite.Composite.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.cell.composite.Composite.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.cell.composite.Composite.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.cell.composite.Composite.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.cell.composite.Composite.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.composite.Composite.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.library",
"url":13,
"doc":""
},
{
"ref":"fnpcell.cell.library.Library",
"url":13,
"doc":"Library is for defining Library. Library only stores cells, cell reference will be flattened to cell Usage:   from fnpcell import all as fp from gpdk.components.bend.bend_euler import BendEuler if __name__  \"__main__\": from pathlib import Path gds_file = Path(__file__).parent / \"local\" / Path(__file__).with_suffix(\".gds\").name library = fp.Library()                                     =  fmt: off library += BendEuler()  fmt: on                                = fp.export_gds(library, file=gds_file)  fp.plot(library)  "
},
{
"ref":"fnpcell.cell.library.Library.content",
"url":13,
"doc":""
},
{
"ref":"fnpcell.cell.library.new_library",
"url":13,
"doc":"Create a library",
"func":1
},
{
"ref":"fnpcell.cell.metal_line",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine",
"url":14,
"doc":"MetalLine is for defining a MetalLine. Any modification will create new MetalLine instead of modify the original MetalLine."
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.cell",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.raw_curve",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.type",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.offset",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.final_offset",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.extension",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.transform",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.patches",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.name",
"url":14,
"doc":""
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.curve_length",
"url":14,
"doc":"Return curve length."
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.with_name",
"url":14,
"doc":"Return a new Metal line with the given name.",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.with_ports",
"url":14,
"doc":"Metal line without ports this function will trow an error",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.with_patches",
"url":14,
"doc":"Return a new Metal line with the given content.",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.with_bands",
"url":14,
"doc":"Return a new waveguide with the given bands.",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.ports",
"url":11,
"doc":"Return owned ports of the cell reference."
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.flatten",
"url":11,
"doc":"Return a new cell reference with transformed content and identity transform to itself. Useful to fix the \"1nm gap\" due to gds spec This method only flatten one level, not recursively flatten all content. Examples: >>> new_device = device.flatten()",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.transform_combined",
"url":11,
"doc":"Return a new cell reference with a new transform which is its transform combined with the given transform",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.content_merged",
"url":11,
"doc":"Return a new cell reference with close elements on same layer merged into polygons. Multiple layers can be provided and elements on each layer will be merged into polygons seperately. examples: >>> new_device = device.content_merged(affected_layer=TECH.LAYER.FWG_CORE) >>> new_device = device.content_merged(affected_layer=[TECH.LAYER.FWG_CORE, TECH.LAYER.SWG_CORE])",
"func":1
},
{
"ref":"fnpcell.cell.metal_line.MetalLine.new_array",
"url":11,
"doc":"Return a new cell reference array",
"func":1
},
{
"ref":"fnpcell.cell.pin",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.Pin",
"url":15,
"doc":"Pin is for defining a electrial Pin . Any modification will create new Pin instead of modify the original Pin. Usage:   from fnpcell import all as fp pin = fp.Pin(name=\"ep_0\", position=(0, 0), .)  "
},
{
"ref":"fnpcell.cell.pin.Pin.name",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.Pin.position",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.Pin.shape",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.Pin.metal_line_type",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.Pin.orientation",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.Pin.hidden",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.Pin.annotation",
"url":15,
"doc":"Return composite."
},
{
"ref":"fnpcell.cell.pin.Pin.with_orientation",
"url":15,
"doc":"Return a new pin with the given orientation.",
"func":1
},
{
"ref":"fnpcell.cell.pin.Pin.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.cell.pin.Pin.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.cell.pin.new_pin",
"url":15,
"doc":"Create a new electrial pin.",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin",
"url":15,
"doc":"OwnedPin is for defining a pin owned by a CellRef. OwnedPin with owner attribute can appoint to it's owner,owner is a CellRef Any modification will create new OwnedPin instead of modify the original OwnedPin."
},
{
"ref":"fnpcell.cell.pin.OwnedPin.name",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.OwnedPin.raw",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.OwnedPin.owner",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.OwnedPin.assigned_orientation",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.OwnedPin.hidden",
"url":15,
"doc":""
},
{
"ref":"fnpcell.cell.pin.OwnedPin.annotation",
"url":15,
"doc":"Return composite."
},
{
"ref":"fnpcell.cell.pin.OwnedPin.flatten",
"url":15,
"doc":"Return pin.",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.position",
"url":15,
"doc":"Return pin position."
},
{
"ref":"fnpcell.cell.pin.OwnedPin.orientation",
"url":15,
"doc":"Return calculated orientation take owner's transform into account"
},
{
"ref":"fnpcell.cell.pin.OwnedPin.with_orientation",
"url":15,
"doc":"Return a new OwnedPin with the given orientation.",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.shape",
"url":15,
"doc":"Return pin shape."
},
{
"ref":"fnpcell.cell.pin.OwnedPin.metal_line_type",
"url":15,
"doc":"Return pin metal_line_type"
},
{
"ref":"fnpcell.cell.pin.OwnedPin.from_pin",
"url":15,
"doc":"Return OwnedPin.",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.rotated",
"url":10,
"doc":"Rotated both degrees and radians.",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.repositioned",
"url":10,
"doc":"Positioned at new point,Owner will translated.",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.h_mirrored",
"url":10,
"doc":"Owner horizontal mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.v_mirrored",
"url":10,
"doc":"Owner vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.pin.OwnedPin.c_mirrored",
"url":10,
"doc":"Owner center mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.port",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.Port",
"url":16,
"doc":"Port is for defining a optical Port . Any modification will create new Port instead of modify the original Port. Orientation in radians. Usage:   from fnpcell import all as fp port = fp.Port(name=\"op_0\", position=(0, 0), .)  "
},
{
"ref":"fnpcell.cell.port.Port.name",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.Port.position",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.Port.orientation",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.Port.waveguide_type",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.Port.shape",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.Port.hidden",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.Port.annotation",
"url":16,
"doc":"Return port composite on the basis of waveguide_type."
},
{
"ref":"fnpcell.cell.port.Port.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.cell.port.Port.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.cell.port.new_port",
"url":16,
"doc":"Create a new optical port. Orientation in radians.",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort",
"url":16,
"doc":"OwnedPort is for defining a port owned by a CellRef. OwnedPort with owner attribute can appoint to it's owner,owner is a CellRef Any modification will create new OwnedPort instead of modify the original OwnedPort."
},
{
"ref":"fnpcell.cell.port.OwnedPort.name",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.OwnedPort.raw",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.OwnedPort.owner",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.OwnedPort.assigned_orientation",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.OwnedPort.hidden",
"url":16,
"doc":""
},
{
"ref":"fnpcell.cell.port.OwnedPort.annotation",
"url":16,
"doc":"Return composite."
},
{
"ref":"fnpcell.cell.port.OwnedPort.flatten",
"url":16,
"doc":"Return port.",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.from_port",
"url":16,
"doc":"Return OwnedPort.",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.position",
"url":16,
"doc":"Return position."
},
{
"ref":"fnpcell.cell.port.OwnedPort.orientation",
"url":16,
"doc":"Return calculated orientation take owner's transform into account."
},
{
"ref":"fnpcell.cell.port.OwnedPort.waveguide_type",
"url":16,
"doc":"Return waveguide_type."
},
{
"ref":"fnpcell.cell.port.OwnedPort.shape",
"url":16,
"doc":"Return pin shape."
},
{
"ref":"fnpcell.cell.port.OwnedPort.with_orientation",
"url":16,
"doc":"Return a new OwnedPort with the given orientation.",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.rotated",
"url":10,
"doc":"Rotated both degrees and radians.",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.repositioned",
"url":10,
"doc":"Positioned at new point,Owner will translated.",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.h_mirrored",
"url":10,
"doc":"Owner horizontal mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.v_mirrored",
"url":10,
"doc":"Owner vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.port.OwnedPort.c_mirrored",
"url":10,
"doc":"Owner center mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide",
"url":17,
"doc":"Waveguide is for defining a Waveguide. Any modification will create new Waveguide instead of modify the original Waveguide."
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.cell",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.raw_curve",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.type",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.offset",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.final_offset",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.extension",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.transform",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.patches",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.name",
"url":17,
"doc":""
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.curve_length",
"url":17,
"doc":"Return curve length."
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.with_name",
"url":17,
"doc":"Modified name.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.with_ports",
"url":17,
"doc":"Modified ports.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.with_patches",
"url":17,
"doc":"Modified content.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.with_bands",
"url":17,
"doc":"Return a new waveguide with the given bands.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.ports",
"url":11,
"doc":"Return owned ports of the cell reference."
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.flatten",
"url":11,
"doc":"Return a new cell reference with transformed content and identity transform to itself. Useful to fix the \"1nm gap\" due to gds spec This method only flatten one level, not recursively flatten all content. Examples: >>> new_device = device.flatten()",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.transform_combined",
"url":11,
"doc":"Return a new cell reference with a new transform which is its transform combined with the given transform",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.content_merged",
"url":11,
"doc":"Return a new cell reference with close elements on same layer merged into polygons. Multiple layers can be provided and elements on each layer will be merged into polygons seperately. examples: >>> new_device = device.content_merged(affected_layer=TECH.LAYER.FWG_CORE) >>> new_device = device.content_merged(affected_layer=[TECH.LAYER.FWG_CORE, TECH.LAYER.SWG_CORE])",
"func":1
},
{
"ref":"fnpcell.cell.waveguide.Waveguide.new_array",
"url":11,
"doc":"Return a new cell reference array",
"func":1
},
{
"ref":"fnpcell.compat",
"url":18,
"doc":""
},
{
"ref":"fnpcell.compat.compat_export_gds",
"url":18,
"doc":"",
"func":1
},
{
"ref":"fnpcell.compat.compat_import_from_gds",
"url":18,
"doc":"",
"func":1
},
{
"ref":"fnpcell.compat.compat_export_spc",
"url":18,
"doc":"",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve",
"url":18,
"doc":"Base class curve."
},
{
"ref":"fnpcell.compat.CompatCurve.curve_reversed",
"url":18,
"doc":""
},
{
"ref":"fnpcell.compat.CompatCurve.probe_depth",
"url":18,
"doc":""
},
{
"ref":"fnpcell.compat.CompatCurve.subdevisions",
"url":18,
"doc":""
},
{
"ref":"fnpcell.compat.CompatCurve.raw_curve_points",
"url":18,
"doc":"",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.subcurve",
"url":19,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.compat.CompatCurve.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.compat.new_waveguide",
"url":18,
"doc":"",
"func":1
},
{
"ref":"fnpcell.compat.new_metal_line",
"url":18,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element",
"url":21,
"doc":""
},
{
"ref":"fnpcell.element.all",
"url":22,
"doc":""
},
{
"ref":"fnpcell.element.arc",
"url":23,
"doc":""
},
{
"ref":"fnpcell.element.arc.Arc",
"url":23,
"doc":"Create a CircularArc.",
"func":1
},
{
"ref":"fnpcell.element.box",
"url":24,
"doc":""
},
{
"ref":"fnpcell.element.box.Box",
"url":24,
"doc":"Create a box with layer.",
"func":1
},
{
"ref":"fnpcell.element.circle",
"url":25,
"doc":""
},
{
"ref":"fnpcell.element.circle.Circle",
"url":25,
"doc":"Create a Circle.",
"func":1
},
{
"ref":"fnpcell.element.curve",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.new_curve",
"url":26,
"doc":"Create a curve with layer. default stroke_width=1 default stroke_offset=0 default miter_limit=0.5",
"func":1
},
{
"ref":"fnpcell.element.curve.Curve",
"url":26,
"doc":"Curve is Subclass of polyline."
},
{
"ref":"fnpcell.element.curve.Curve.raw_curve",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.stroke_width",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.final_stroke_width",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.stroke_offset",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.final_stroke_offset",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.taper_function",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.miter_limit",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.extension",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.end_hints",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.transform",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.layer",
"url":26,
"doc":""
},
{
"ref":"fnpcell.element.curve.Curve.with_layer",
"url":26,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.curve.Curve.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.curve.Curve.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.curve.Curve.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.curve.Curve.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.curve.Curve.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.curve.Curve.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.element.curve_paint",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.CurvePaint",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.CurvePaint.ContinuousLayer",
"url":27,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.curve_paint.CurvePaint.PeriodicSampling",
"url":27,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.curve_paint.CurvePaint.Composite",
"url":27,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.curve_paint.CurvePaint.from_profile",
"url":27,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint",
"url":27,
"doc":"ContinuousLayerCurvePaint( args,  kwds)"
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.layer",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.offset",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.width",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.extension",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.miter_limit",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.final_offset",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.final_width",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.taper_function",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.end_hints",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.with_slots",
"url":27,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.curve_paint.ContinuousLayerCurvePaint.with_cracks",
"url":27,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.curve_paint.SlottedLayerCurvePaint",
"url":27,
"doc":"SlottedLayerCurvePaint( args,  kwds)"
},
{
"ref":"fnpcell.element.curve_paint.SlottedLayerCurvePaint.max_width",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.SlottedLayerCurvePaint.slot_width",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.SlottedLayerCurvePaint.slot_length",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.SlottedLayerCurvePaint.min_slot_length",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.SlottedLayerCurvePaint.slot_gap",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.SlottedLayerCurvePaint.stagger_offset",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.CrackedLayerCurvePaint",
"url":27,
"doc":"CrackedLayerCurvePaint( args,  kwds)"
},
{
"ref":"fnpcell.element.curve_paint.CrackedLayerCurvePaint.max_width",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.CrackedLayerCurvePaint.spacing",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.CrackedLayerCurvePaint.count_of_lanes",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.CrackedLayerCurvePaint.offset_widths",
"url":27,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint",
"url":27,
"doc":"PeriodicSamplingCurvePaint( args,  kwds)"
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint.pattern",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint.period",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint.reserved_ends",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint.offset",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint.final_offset",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint.miter_limit",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint.taper_function",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.PeriodicSamplingCurvePaint.rotate",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.curve_paint.CompositeCurvePaint",
"url":27,
"doc":"CompositeCurvePaint( args,  kwds)"
},
{
"ref":"fnpcell.element.curve_paint.CompositeCurvePaint.curve_paints",
"url":27,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code",
"url":28,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code.pack_words",
"url":28,
"doc":"3 raw bytes to 2 encoded bytes stuffing for datamatrix text modes.",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.tokenize",
"url":28,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.encode_text_mode",
"url":28,
"doc":"Encode to datamatrix text modes (C40, TEXT, X12).",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.encode_to_C40",
"url":28,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.encode_to_X12",
"url":28,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.encode_to_ascii",
"url":28,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.pack",
"url":28,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.encode_to_edifact",
"url":28,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.encode_to_text",
"url":28,
"doc":"Encode to datamatrix.text.",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCodeModel",
"url":28,
"doc":"Create a datamatrix code for message 'msg'. Set rect=True for a rectangular datamatrix (if possible). Default is False, resulting in a square datamatrix."
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCodeModel.colrow",
"url":28,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode",
"url":28,
"doc":"DataMatrixCode( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.data",
"url":28,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.layer",
"url":28,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.invert",
"url":28,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.pixel_size",
"url":28,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.transform",
"url":28,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.content",
"url":28,
"doc":""
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.with_layer",
"url":28,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.element.dmtx_code.DataMatrixCode.ungrouped",
"url":10,
"doc":"ungrouped self in recursion. If there's a sub group in the content, the sub group will be ungrouped too. Return a tuple of IPrimitive.",
"func":1
},
{
"ref":"fnpcell.element.elliptical_arc",
"url":29,
"doc":""
},
{
"ref":"fnpcell.element.elliptical_arc.EllipticalArc",
"url":29,
"doc":"Create a EllipticalArc.",
"func":1
},
{
"ref":"fnpcell.element.elliptical_ring",
"url":30,
"doc":""
},
{
"ref":"fnpcell.element.elliptical_ring.EllipticalRing",
"url":30,
"doc":"Create a EllipticalRing.",
"func":1
},
{
"ref":"fnpcell.element.group",
"url":31,
"doc":""
},
{
"ref":"fnpcell.element.group.new_group",
"url":31,
"doc":"Create a group This is a container of primitives(eg. primitive is a polygon with layer.).",
"func":1
},
{
"ref":"fnpcell.element.group.Group",
"url":31,
"doc":"Group is a dataclass for defining a Group."
},
{
"ref":"fnpcell.element.group.Group.content",
"url":31,
"doc":""
},
{
"ref":"fnpcell.element.group.Group.transform",
"url":31,
"doc":""
},
{
"ref":"fnpcell.element.group.Group.layer",
"url":31,
"doc":"Return layer."
},
{
"ref":"fnpcell.element.group.Group.appended",
"url":31,
"doc":"Add content.",
"func":1
},
{
"ref":"fnpcell.element.group.Group.with_layer",
"url":31,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.group.Group.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.group.Group.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.group.Group.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.group.Group.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.group.Group.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.group.Group.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.element.group.Group.ungrouped",
"url":10,
"doc":"ungrouped self in recursion. If there's a sub group in the content, the sub group will be ungrouped too. Return a tuple of IPrimitive.",
"func":1
},
{
"ref":"fnpcell.element.label",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.new_label",
"url":32,
"doc":"Create a label.",
"func":1
},
{
"ref":"fnpcell.element.label.Label",
"url":32,
"doc":"Label is a dataclass for defining a Label."
},
{
"ref":"fnpcell.element.label.Label.text",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.Label.highlight",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.Label.font_size",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.Label.baseline",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.Label.anchor",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.Label.transform",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.Label.layer",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.Label.font",
"url":32,
"doc":""
},
{
"ref":"fnpcell.element.label.Label.with_layer",
"url":32,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.label.Label.content",
"url":32,
"doc":"Return a tuple of label group."
},
{
"ref":"fnpcell.element.label.Label.size",
"url":32,
"doc":"Return font size."
},
{
"ref":"fnpcell.element.label.Label.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.label.Label.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.label.Label.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.label.Label.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.label.Label.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.label.Label.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.element.label.Label.ungrouped",
"url":10,
"doc":"ungrouped self in recursion. If there's a sub group in the content, the sub group will be ungrouped too. Return a tuple of IPrimitive.",
"func":1
},
{
"ref":"fnpcell.element.line",
"url":33,
"doc":""
},
{
"ref":"fnpcell.element.line.new_line",
"url":33,
"doc":"Create a line with layer.",
"func":1
},
{
"ref":"fnpcell.element.line.new_line_between",
"url":33,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.line.Line",
"url":33,
"doc":"Create a line with layer.",
"func":1
},
{
"ref":"fnpcell.element.polygon",
"url":34,
"doc":""
},
{
"ref":"fnpcell.element.polygon.new_polygon",
"url":34,
"doc":"Create a polygon.",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon",
"url":34,
"doc":"Polygon is a class for defining a polygon."
},
{
"ref":"fnpcell.element.polygon.Polygon.raw_shape",
"url":34,
"doc":""
},
{
"ref":"fnpcell.element.polygon.Polygon.with_layer",
"url":34,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon.polygon_preconditions",
"url":34,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon.from_points",
"url":34,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.polygon.Polygon.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.element.polygon_set",
"url":35,
"doc":""
},
{
"ref":"fnpcell.element.polygon_set.new_polygon_set",
"url":35,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet",
"url":35,
"doc":"Interface of element,element is geometry with layer."
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.region",
"url":35,
"doc":""
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.polygons",
"url":35,
"doc":""
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.inverted",
"url":35,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.with_layer",
"url":35,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.boolean_and",
"url":35,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.boolean_or",
"url":35,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.boolean_sub",
"url":35,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.boolean_xor",
"url":35,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.polygon_set.PolygonSet.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.element.polyline",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.new_polyline",
"url":36,
"doc":"Create a polyline with layer.",
"func":1
},
{
"ref":"fnpcell.element.polyline.Polyline",
"url":36,
"doc":"Polygon is a class for defining a polygon."
},
{
"ref":"fnpcell.element.polyline.Polyline.stroke_width",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.final_stroke_width",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.stroke_offset",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.final_stroke_offset",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.taper_function",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.miter_limit",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.extension",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.end_hints",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.polyline_preconditions",
"url":36,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.polyline.Polyline.polygon_points",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.alengths",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.curve_length",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.shape",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.polyline_curve",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.polyline_points",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.end_rays",
"url":36,
"doc":""
},
{
"ref":"fnpcell.element.polyline.Polyline.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.polyline.Polyline.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.polyline.Polyline.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.polyline.Polyline.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.polyline.Polyline.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.polyline.Polyline.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.element.qr_code",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.ErrorCorrection",
"url":37,
"doc":"An enumeration."
},
{
"ref":"fnpcell.element.qr_code.ErrorCorrection.ordinal",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.ErrorCorrection.formatbits",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.ErrorCorrection.LOW",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.ErrorCorrection.MEDIUM",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.ErrorCorrection.QUARTILE",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.ErrorCorrection.HIGH",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.SegmentMode",
"url":37,
"doc":"Describes how a segment's data bits are interpreted. Immutable."
},
{
"ref":"fnpcell.element.qr_code.SegmentMode.get_mode_bits",
"url":37,
"doc":"Returns an unsigned 4-bit integer value (range 0 to 15) representing the mode indicator bits for this mode object.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.SegmentMode.num_char_count_bits",
"url":37,
"doc":"Returns the bit width of the character count field for a segment in this mode in a QR Code at the given version number. The result is in the range [0, 16].",
"func":1
},
{
"ref":"fnpcell.element.qr_code.SegmentMode.NUMERIC",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.SegmentMode.ALPHANUMERIC",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.SegmentMode.BYTE",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.SegmentMode.KANJI",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.SegmentMode.ECI",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel",
"url":37,
"doc":"A QR Code symbol, which is a type of two-dimension barcode. Invented by Denso Wave and described in the ISO/IEC 18004 standard. Instances of this class represent an immutable square grid of dark and light cells. The class provides static factory functions to create a QR Code from text or binary data. The class covers the QR Code Model 2 specification, supporting all versions (sizes) from 1 to 40, all 4 error correction levels, and 4 character encoding modes. Ways to create a QR Code object: - High level: Take the payload data and call QRCode.encode_text() or QRCode.encode_binary(). - Mid level: Custom-make the list of segments and call QRCode.encode_segments(). - Low level: Custom-make the array of data codeword bytes (including segment headers and final padding, excluding error correction codewords), supply the appropriate version number, and call the QRCode() constructor. (Note that all ways require supplying the desired error correction level.) Creates a new QR Code with the given version number, error correction level, data codeword bytes, and mask number. This is a low-level API that most users should not use directly. A mid-level API is the encode_segments() function."
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.encode_text",
"url":37,
"doc":"Returns a QR Code representing the given Unicode text string at the given error correction level. As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.encode_binary",
"url":37,
"doc":"Returns a QR Code representing the given binary data at the given error correction level. This function always encodes using the binary segment mode, not any text mode. The maximum number of bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.encode_segments",
"url":37,
"doc":"Returns a QR Code representing the given segments with the given encoding parameters. The smallest possible QR Code version within the given range is automatically chosen for the output. Iff boostecl is true, then the ECC level of the result may be higher than the ecl argument if it can be done without increasing the version. The mask number is either between 0 to 7 (inclusive) to force that mask, or -1 to automatically choose an appropriate mask (which may be slow). This function allows the user to create a custom sequence of segments that switches between modes (such as alphanumeric and byte) to encode text in less space. This is a mid-level API; the high-level API is encode_text() and encode_binary().",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.get_version",
"url":37,
"doc":"Returns this QR Code's version number, in the range [1, 40].",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.get_size",
"url":37,
"doc":"Returns this QR Code's size, in the range [21, 177].",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.get_error_correction_level",
"url":37,
"doc":"Returns this QR Code's error correction level.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.get_mask",
"url":37,
"doc":"Returns this QR Code's mask, in the range [0, 7].",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.get_module",
"url":37,
"doc":"Returns the color of the module (pixel) at the given coordinates, which is False for light or True for dark. The top left corner has the coordinates (x=0, y=0). If the given coordinates are out of bounds, then False (light) is returned.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.MIN_VERSION",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCodeModel.MAX_VERSION",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.Segment",
"url":37,
"doc":"A segment of character/binary/control data in a QR Code symbol. Instances of this class are immutable. The mid-level way to create a segment is to take the payload data and call a static factory function such as QrSegment.make_numeric(). The low-level way to create a segment is to custom-make the bit buffer and call the QrSegment() constructor with appropriate values. This segment class imposes no length restrictions, but QR Codes have restrictions. Even in the most favorable conditions, a QR Code can only hold 7089 characters of data. Any segment longer than this is meaningless for the purpose of generating QR Codes. Creates a new QR Code segment with the given attributes and data. The character count (numch) must agree with the mode and the bit buffer length, but the constraint isn't checked. The given bit buffer is cloned and stored."
},
{
"ref":"fnpcell.element.qr_code.Segment.make_bytes",
"url":37,
"doc":"Returns a segment representing the given binary data encoded in byte mode. All input byte lists are acceptable. Any text string can be converted to UTF-8 bytes (s.encode(\"UTF-8\" and encoded as a byte mode segment.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.make_numeric",
"url":37,
"doc":"Returns a segment representing the given string of decimal digits encoded in numeric mode.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.make_alphanumeric",
"url":37,
"doc":"Returns a segment representing the given text string encoded in alphanumeric mode. The characters allowed are: 0 to 9, A to Z (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.make_segments",
"url":37,
"doc":"Returns a new mutable list of zero or more segments to represent the given Unicode text string. The result may use various segment modes and switch modes to optimize the length of the bit stream.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.make_eci",
"url":37,
"doc":"Returns a segment representing an Extended Channel Interpretation (ECI) designator with the given assignment value.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.is_numeric",
"url":37,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.is_alphanumeric",
"url":37,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.get_mode",
"url":37,
"doc":"Returns the mode field of this segment.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.get_num_chars",
"url":37,
"doc":"Returns the character count field of this segment.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.get_data",
"url":37,
"doc":"Returns a new copy of the data bits of this segment.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.Segment.get_total_bits",
"url":37,
"doc":"Calculates the number of bits needed to encode the given segments at the given version. Returns a non-negative number if successful. Otherwise returns None if a segment has too many characters to fit its length field.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCode",
"url":37,
"doc":"QRCode( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.element.qr_code.QRCode.data",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCode.layer",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCode.invert",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCode.pixel_size",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCode.error_correction",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCode.transform",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCode.content",
"url":37,
"doc":""
},
{
"ref":"fnpcell.element.qr_code.QRCode.with_layer",
"url":37,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCode.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCode.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCode.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCode.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCode.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCode.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.element.qr_code.QRCode.ungrouped",
"url":10,
"doc":"ungrouped self in recursion. If there's a sub group in the content, the sub group will be ungrouped too. Return a tuple of IPrimitive.",
"func":1
},
{
"ref":"fnpcell.element.rect",
"url":38,
"doc":""
},
{
"ref":"fnpcell.element.rect.Rect",
"url":38,
"doc":"Create a rect with layer.",
"func":1
},
{
"ref":"fnpcell.element.regular_polygon",
"url":39,
"doc":""
},
{
"ref":"fnpcell.element.regular_polygon.RegularPolygon",
"url":39,
"doc":"Create a regular polygon with layer.",
"func":1
},
{
"ref":"fnpcell.element.ring",
"url":40,
"doc":""
},
{
"ref":"fnpcell.element.ring.Ring",
"url":40,
"doc":"Create a CirclarRing.",
"func":1
},
{
"ref":"fnpcell.element.text",
"url":41,
"doc":""
},
{
"ref":"fnpcell.element.text.new_text",
"url":41,
"doc":"Create a text with layer.",
"func":1
},
{
"ref":"fnpcell.element.text.Text",
"url":41,
"doc":"Text( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.element.text.Text.content",
"url":41,
"doc":""
},
{
"ref":"fnpcell.element.text.Text.text_anchor",
"url":41,
"doc":""
},
{
"ref":"fnpcell.element.text.Text.vertical_align",
"url":41,
"doc":""
},
{
"ref":"fnpcell.element.text.Text.transform",
"url":41,
"doc":""
},
{
"ref":"fnpcell.element.text.Text.layer",
"url":41,
"doc":""
},
{
"ref":"fnpcell.element.text.Text.with_layer",
"url":41,
"doc":"",
"func":1
},
{
"ref":"fnpcell.element.text.Text.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.element.text.Text.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.element.text.Text.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.element.text.Text.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.element.text.Text.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.element.text.Text.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.errors",
"url":42,
"doc":"Common errors fnpcell may raise"
},
{
"ref":"fnpcell.errors.ConflictError",
"url":42,
"doc":"Inappropriate argument value (of correct type)."
},
{
"ref":"fnpcell.errors.FrozenInstanceError",
"url":42,
"doc":"Attribute not found."
},
{
"ref":"fnpcell.errors.FlylineWarning",
"url":42,
"doc":"Base class for warnings generated by user code."
},
{
"ref":"fnpcell.errors.LengthMatchingWarning",
"url":42,
"doc":"Base class for warnings generated by user code."
},
{
"ref":"fnpcell.errors.UserUnitWarning",
"url":42,
"doc":"Base class for warnings generated by user code."
},
{
"ref":"fnpcell.errors.DataTooLongError",
"url":42,
"doc":"Inappropriate argument value (of correct type)."
},
{
"ref":"fnpcell.errors.InsufficientSpaceError",
"url":42,
"doc":"Inappropriate argument value (of correct type)."
},
{
"ref":"fnpcell.fp",
"url":43,
"doc":"Common floating functions to handle floating errors"
},
{
"ref":"fnpcell.fp.round_half_up",
"url":43,
"doc":"Return the round value as an Integral.",
"func":1
},
{
"ref":"fnpcell.fp.is_close",
"url":43,
"doc":"Determine whether two floating point numbers are close in value. Args: epsilon: maximum difference for being considered \"close.",
"func":1
},
{
"ref":"fnpcell.fp.is_zero",
"url":43,
"doc":"Determine whether value is 0. Args: epsilon: maximum difference for being considered 0.",
"func":1
},
{
"ref":"fnpcell.fp.is_nonzero",
"url":43,
"doc":"Determine whether value is not 0. Args: epsilon: maximum difference for being not considered 0.",
"func":1
},
{
"ref":"fnpcell.fp.is_one",
"url":43,
"doc":"Determine whether value is 1. Args: epsilon: maximum difference for being considered 1.",
"func":1
},
{
"ref":"fnpcell.fp.is_positive",
"url":43,
"doc":"",
"func":1
},
{
"ref":"fnpcell.fp.is_negative",
"url":43,
"doc":"",
"func":1
},
{
"ref":"fnpcell.fp.is_non_positive",
"url":43,
"doc":"",
"func":1
},
{
"ref":"fnpcell.fp.is_non_negative",
"url":43,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii",
"url":44,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_importer",
"url":45,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_importer.GDSImporter",
"url":45,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_importer.GDSImporter.unit_ratio",
"url":45,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_importer.GDSImporter.user_unit",
"url":45,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_importer.GDSImporter.cell_names",
"url":45,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_importer.GDSImporter.import_cell",
"url":45,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_importer.GDSImporter.top_cells",
"url":45,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType",
"url":46,
"doc":"An enumeration."
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.HEADER",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.BGNLIB",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.LIBNAME",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.UNITS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ENDLIB",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.BGNSTR",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.STRNAME",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ENDSTR",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.BOUNDARY",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.PATH",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.SREF",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.AREF",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.TEXT",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.LAYER",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.DATATYPE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.WIDTH",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.XY",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ENDEL",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.SNAME",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.COLROW",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.TEXTNODE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.NODE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.TEXTTYPE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.PRESENTATION",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.SPACING",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.STRING",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.STRANS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.MAG",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ANGLE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.UINTEGER",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.USTRING",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.REFLIBS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.FONTS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.PATHTYPE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.GENERATIONS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ATTRTABLE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.STYPTABLE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.STRTYPE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ELFLAGS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ELKEY",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.LINKTYPE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.LINKKEYS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.NODETYPE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.PROPATTR",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.PROPVALUE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.BOX",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.BOXTYPE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.PLEX",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.BGNEXTN",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ENDEXTN",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.TAPENUM",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.TAPECODE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.STRCLASS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.RESERVED",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.FORMAT",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.MASK",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.ENDMASKS",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.LIBDIRSIZE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.SRFNAME",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.LIBSECUR",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.BORDER",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.SOFTFENCE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.HARDFENCE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.SOFTWIRE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.HARDWIRE",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.PATHPORT",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.NODEPORT",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.USERCONSTRAINT",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.SPACER_ERROR",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordType.CONTACT",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordDataType",
"url":46,
"doc":"An enumeration."
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordDataType.NODATA",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordDataType.BITARRAY",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordDataType.INT16",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordDataType.INT32",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordDataType.REAL4",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordDataType.REAL8",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSRecordDataType.ASCII",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSTransformFlag",
"url":46,
"doc":"An enumeration."
},
{
"ref":"fnpcell.gdsii.gds_io.GDSTransformFlag.REFLECTION",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSTransformFlag.ABS_MAGNIFICATION",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSTransformFlag.ABS_ROTATION",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSTransform",
"url":46,
"doc":"GDSTransform(reflection: bool = False, magnification: float = 1, rotation: float = 0)"
},
{
"ref":"fnpcell.gdsii.gds_io.GDSTransform.reflection",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSTransform.magnification",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSTransform.rotation",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.normalize_angle",
"url":46,
"doc":"Normalize angle into [0, 360].",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.round_to_db_unit",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.str_to_bytes",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.close",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_bytes",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_uint8",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_int16",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_uint16",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_int32",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_real64",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_datetime",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_header",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_bgnlib",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_libname",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_units",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_nodata",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_bgnstr",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_sref",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_aref",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_endstr",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_path",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_boundary",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_endel",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_endlib",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_text",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_strname",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_string",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_layer",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_datatype",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_width",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_colrow",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_xy",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_sname",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_strans",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_mag",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_angle",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_transform",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_texttype",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_pathtype",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_annotation",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_polyline",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSOutputWriter.write_polygon",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.unpack_uint16s",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.unpack_int16s",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.unpack_int32s",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.unpack_real8s",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.unpack_real8",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser",
"url":46,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.close",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.raw_next_record",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.peek_next",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.read_next",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_record",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_record",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.rep0",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.rep1",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.rep0_record",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.rep1_record",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.peek_record",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_stream",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_header",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_bgnlib",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_libdirsize",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_srfname",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_libsecur",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_libname",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_reflibs",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_fonts",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_attrtable",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_generations",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_format_type",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.rep1_mask",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_units",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.rep0_structure",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_structure",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_bgnstr",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_strname",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_strclass",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.rep0_element",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_element",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_boundary",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_path",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_sref",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_aref",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_text",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_node",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_box",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_textbody",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_strans",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.opt_property",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.rep0_property",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_endel",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_endstr",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_io.GDSInputParser.parse_endlib",
"url":46,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_writer",
"url":47,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter",
"url":47,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.gds",
"url":47,
"doc":""
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.close",
"url":47,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.push_ctm",
"url":47,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.pop_ctm",
"url":47,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.toplevel",
"url":47,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.get_cell_name",
"url":47,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.get_generated_cell_name",
"url":47,
"doc":"",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.enter",
"url":47,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"fnpcell.gdsii.gds_writer.GDSWriter.exit",
"url":47,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"fnpcell.geometry",
"url":48,
"doc":""
},
{
"ref":"fnpcell.geometry.arc",
"url":49,
"doc":""
},
{
"ref":"fnpcell.geometry.arc.new_arc",
"url":49,
"doc":"Create a CircularArc.",
"func":1
},
{
"ref":"fnpcell.geometry.bezier",
"url":50,
"doc":""
},
{
"ref":"fnpcell.geometry.bezier.new_bezier",
"url":50,
"doc":"Create a bezier curve.",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier",
"url":50,
"doc":"Bezier( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.bezier.Bezier.controls",
"url":50,
"doc":""
},
{
"ref":"fnpcell.geometry.bezier.Bezier.transform",
"url":50,
"doc":""
},
{
"ref":"fnpcell.geometry.bezier.Bezier.curve_function",
"url":50,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.raw_end_orientations",
"url":50,
"doc":""
},
{
"ref":"fnpcell.geometry.bezier.Bezier.subcurve",
"url":19,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.bezier.Bezier.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.box",
"url":51,
"doc":""
},
{
"ref":"fnpcell.geometry.box.new_box",
"url":51,
"doc":"Create a box.",
"func":1
},
{
"ref":"fnpcell.geometry.box.Box",
"url":51,
"doc":"Box( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.box.Box.width",
"url":51,
"doc":""
},
{
"ref":"fnpcell.geometry.box.Box.height",
"url":51,
"doc":""
},
{
"ref":"fnpcell.geometry.box.Box.stroke_width",
"url":51,
"doc":""
},
{
"ref":"fnpcell.geometry.box.Box.transform",
"url":51,
"doc":""
},
{
"ref":"fnpcell.geometry.box.Box.raw_shape_points",
"url":51,
"doc":"Return all points of box"
},
{
"ref":"fnpcell.geometry.box.Box.offsetted",
"url":52,
"doc":"Args: offset: float, offset towards left if positive, towards right if negative Returns: A new shape. If points of the shape is clockwise, positive offset makes result shape bigger, negative offset makes result shape smaller. If points of the shape is counter-clockwise, positive offset makes result shape smaller, negative offset makes result shape bigger.",
"func":1
},
{
"ref":"fnpcell.geometry.box.Box.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.box.Box.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.box.Box.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.box.Box.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.box.Box.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.box.Box.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.circle",
"url":53,
"doc":""
},
{
"ref":"fnpcell.geometry.circle.new_circle",
"url":53,
"doc":"Create a CircularArc.",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend",
"url":54,
"doc":""
},
{
"ref":"fnpcell.geometry.cosine_bend.new_cosine_bend",
"url":54,
"doc":"Create a CosineBend curve. :param degrees central angle in degrees :param radius_min radius minimum :param radius_eff radius effective choose either radius_min(imum) or radius_eff(ective) :param p radio of cosine spiral in whole bend, 0 < p <= 1, when p = 1, there's no cirular part in the bend :param l_max max length of cosine spiral in half bend, l_max is paired with radius_min choose either p or l_max, if both absent, p = 1 is assumed.",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend",
"url":54,
"doc":"CosineBend( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.radius_min",
"url":54,
"doc":""
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.central_angle",
"url":54,
"doc":""
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.l_max",
"url":54,
"doc":""
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.angle_step",
"url":54,
"doc":""
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.transform",
"url":54,
"doc":""
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.curve_curvatures",
"url":54,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.subcurve",
"url":20,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.cosine_bend.CosineBend.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin",
"url":20,
"doc":""
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin",
"url":20,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.transform",
"url":20,
"doc":""
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.to_shape",
"url":20,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.subcurve",
"url":20,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.extended",
"url":20,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.rail",
"url":20,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.offsetted",
"url":20,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.bundle",
"url":20,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.alengths",
"url":20,
"doc":""
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.correct_ends",
"url":20,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.curve_mixin.CurveMixin.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc",
"url":55,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_arc.new_elliptical_arc",
"url":55,
"doc":"Create a EllipticalArc.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.new_circular_bend",
"url":55,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc",
"url":55,
"doc":"EllipticalArc( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.radius",
"url":55,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.initial_angle",
"url":55,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.final_angle",
"url":55,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.transform",
"url":55,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.from_path",
"url":55,
"doc":"Create a EllipticalArc from path rotation degrees",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.bend",
"url":55,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.curve_function",
"url":55,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.curve_points",
"url":55,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.slope",
"url":55,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.end_orientations",
"url":55,
"doc":"Return orientation of the end"
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.subcurve",
"url":20,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_arc.EllipticalArc.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_ring",
"url":56,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_ring.new_elliptical_ring",
"url":56,
"doc":"Create a EllipticalRing.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing",
"url":56,
"doc":"EllipticalRing( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.outer_radius",
"url":56,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.inner_radius",
"url":56,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.initial_angle",
"url":56,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.final_angle",
"url":56,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.transform",
"url":56,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.raw_shape_points",
"url":56,
"doc":""
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.offsetted",
"url":52,
"doc":"Args: offset: float, offset towards left if positive, towards right if negative Returns: A new shape. If points of the shape is clockwise, positive offset makes result shape bigger, negative offset makes result shape smaller. If points of the shape is counter-clockwise, positive offset makes result shape smaller, negative offset makes result shape bigger.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.elliptical_ring.EllipticalRing.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend",
"url":57,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend.new_euler_bend",
"url":57,
"doc":"Create a EulerBend curve. :param degrees central angle in degrees :param radius_min radius minimum :param radius_eff radius effective choose either radius_min(imum) or radius_eff(ective) :param p radio of euler spiral in whole bend, 0 < p <= 1, when p = 1, there's no cirular part in the bend :param l_max max length of euler spiral in half bend, l_max is paired with radius_min choose either p or l_max, if both absent, p = 1 is assumed.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend",
"url":57,
"doc":"EulerBend( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.radius_min",
"url":57,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.central_angle",
"url":57,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.l_max",
"url":57,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.angle_step",
"url":57,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.transform",
"url":57,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.curve_curvatures",
"url":57,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.subcurve",
"url":20,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend.EulerBend.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function",
"url":58,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend_function.new_euler_bend",
"url":58,
"doc":"Create a EulerBend curve. :param degrees central angle in degrees :param radius_min radius minimum :param radius_eff radius effective choose either radius_min(imum) or radius_eff(ective) :param p radio of euler spiral in whole bend, 0 < p <= 1, when p = 1, there's no cirular part in the bend :param l_max max length of euler spiral in half bend, l_max is paired with radius_min choose either p or l_max, if both absent, p = 1 is assumed.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend",
"url":58,
"doc":"EulerBend( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.radius_eff",
"url":58,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.radius_min",
"url":58,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.central_angle",
"url":58,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.p",
"url":58,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.transform",
"url":58,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.p_from_l_max",
"url":58,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.parameters",
"url":58,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.curve_function",
"url":58,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.raw_end_orientations",
"url":58,
"doc":""
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.get_radius_eff",
"url":58,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.subcurve",
"url":19,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.euler_bend_function.EulerBend.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve",
"url":19,
"doc":"Base class curve."
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.curve_reversed",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.probe_depth",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.subdevisions",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.curve_function",
"url":19,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.subcurve",
"url":19,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.first_point",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.last_point",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.raw_curve_points",
"url":19,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.curve_points",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.raw_end_orientations",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.end_orientations",
"url":19,
"doc":""
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.subdivide_curve",
"url":19,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.is_good_enough",
"url":19,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.is_same_grid",
"url":19,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.function_curve.FunctionCurve.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend",
"url":59,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.radius_min",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.central_angle",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.l_max",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.angle_step",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.transform",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.curve_curvatures",
"url":59,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.radius_eff",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.curve_points",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.end_orientations",
"url":59,
"doc":""
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.subcurve",
"url":20,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.hybrid_bend.HybridBend.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.line",
"url":60,
"doc":""
},
{
"ref":"fnpcell.geometry.line.Line",
"url":60,
"doc":"Line( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.line.Line.length",
"url":60,
"doc":""
},
{
"ref":"fnpcell.geometry.line.Line.steps",
"url":60,
"doc":""
},
{
"ref":"fnpcell.geometry.line.Line.anchor",
"url":60,
"doc":""
},
{
"ref":"fnpcell.geometry.line.Line.transform",
"url":60,
"doc":""
},
{
"ref":"fnpcell.geometry.line.Line.curve_function",
"url":60,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.subdevisions",
"url":60,
"doc":"Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object."
},
{
"ref":"fnpcell.geometry.line.Line.subcurve",
"url":19,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.line.Line.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.line.new_line",
"url":60,
"doc":"Create a Line.",
"func":1
},
{
"ref":"fnpcell.geometry.line.new_line_between",
"url":60,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path",
"url":61,
"doc":""
},
{
"ref":"fnpcell.geometry.path.Path",
"url":61,
"doc":"Path( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.path.Path.breakpoints",
"url":61,
"doc":""
},
{
"ref":"fnpcell.geometry.path.Path.curves",
"url":61,
"doc":""
},
{
"ref":"fnpcell.geometry.path.Path.transform",
"url":61,
"doc":""
},
{
"ref":"fnpcell.geometry.path.Path.move",
"url":61,
"doc":"Create a Path.",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.line",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.close",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.ray",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.cubic_bezier",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.quadratic_bezier",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.elliptical_arc",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.appended",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.curve_points",
"url":61,
"doc":""
},
{
"ref":"fnpcell.geometry.path.Path.first_point",
"url":61,
"doc":""
},
{
"ref":"fnpcell.geometry.path.Path.last_point",
"url":61,
"doc":""
},
{
"ref":"fnpcell.geometry.path.Path.end_orientations",
"url":61,
"doc":""
},
{
"ref":"fnpcell.geometry.path.Path.smooth",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.stubbed",
"url":61,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.subcurve",
"url":20,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.path.Path.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.polyline",
"url":62,
"doc":""
},
{
"ref":"fnpcell.geometry.polyline.new_polyline",
"url":62,
"doc":"Create a polyline.",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline",
"url":62,
"doc":"Polyline( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.polyline.Polyline.raw_points",
"url":62,
"doc":""
},
{
"ref":"fnpcell.geometry.polyline.Polyline.raw_end_orientations",
"url":62,
"doc":""
},
{
"ref":"fnpcell.geometry.polyline.Polyline.transform",
"url":62,
"doc":""
},
{
"ref":"fnpcell.geometry.polyline.Polyline.curve_points",
"url":62,
"doc":""
},
{
"ref":"fnpcell.geometry.polyline.Polyline.end_orientations",
"url":62,
"doc":""
},
{
"ref":"fnpcell.geometry.polyline.Polyline.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline.subcurve",
"url":20,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline.split_at",
"url":20,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.geometry.polyline.Polyline.sample_at",
"url":20,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.geometry.rect",
"url":63,
"doc":""
},
{
"ref":"fnpcell.geometry.rect.new_rect",
"url":63,
"doc":"Create a rect",
"func":1
},
{
"ref":"fnpcell.geometry.rect.Rect",
"url":63,
"doc":"Rect( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.rect.Rect.width",
"url":63,
"doc":""
},
{
"ref":"fnpcell.geometry.rect.Rect.height",
"url":63,
"doc":""
},
{
"ref":"fnpcell.geometry.rect.Rect.corner_radii",
"url":63,
"doc":""
},
{
"ref":"fnpcell.geometry.rect.Rect.transform",
"url":63,
"doc":""
},
{
"ref":"fnpcell.geometry.rect.Rect.raw_shape_points",
"url":63,
"doc":""
},
{
"ref":"fnpcell.geometry.rect.Rect.offsetted",
"url":52,
"doc":"Args: offset: float, offset towards left if positive, towards right if negative Returns: A new shape. If points of the shape is clockwise, positive offset makes result shape bigger, negative offset makes result shape smaller. If points of the shape is counter-clockwise, positive offset makes result shape smaller, negative offset makes result shape bigger.",
"func":1
},
{
"ref":"fnpcell.geometry.rect.Rect.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.rect.Rect.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.rect.Rect.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.rect.Rect.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.rect.Rect.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.rect.Rect.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.region",
"url":64,
"doc":""
},
{
"ref":"fnpcell.geometry.region.new_region",
"url":64,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region",
"url":64,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.geometry.region.Region.raw_shapes",
"url":64,
"doc":""
},
{
"ref":"fnpcell.geometry.region.Region.shapes",
"url":64,
"doc":""
},
{
"ref":"fnpcell.geometry.region.Region.merged",
"url":64,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.boolean_and",
"url":64,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.boolean_or",
"url":64,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.boolean_sub",
"url":64,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.boolean_xor",
"url":64,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.region.Region.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.region.split_polygon",
"url":64,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.regular_polygon",
"url":65,
"doc":""
},
{
"ref":"fnpcell.geometry.regular_polygon.new_regular_polygon",
"url":65,
"doc":"Create a RegularPolygon.",
"func":1
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon",
"url":65,
"doc":"RegularPolygon( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.sides",
"url":65,
"doc":""
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.side_length",
"url":65,
"doc":""
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.transform",
"url":65,
"doc":""
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.raw_shape_points",
"url":65,
"doc":""
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.offsetted",
"url":52,
"doc":"Args: offset: float, offset towards left if positive, towards right if negative Returns: A new shape. If points of the shape is clockwise, positive offset makes result shape bigger, negative offset makes result shape smaller. If points of the shape is counter-clockwise, positive offset makes result shape smaller, negative offset makes result shape bigger.",
"func":1
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.regular_polygon.RegularPolygon.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.ring",
"url":66,
"doc":""
},
{
"ref":"fnpcell.geometry.ring.new_ring",
"url":66,
"doc":"Create a CircularRing.",
"func":1
},
{
"ref":"fnpcell.geometry.shape",
"url":52,
"doc":""
},
{
"ref":"fnpcell.geometry.shape.new_shape",
"url":52,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.shape.Shape",
"url":52,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.geometry.shape.Shape.transform",
"url":52,
"doc":""
},
{
"ref":"fnpcell.geometry.shape.Shape.raw_shape_points",
"url":52,
"doc":""
},
{
"ref":"fnpcell.geometry.shape.Shape.shape_points",
"url":52,
"doc":""
},
{
"ref":"fnpcell.geometry.shape.Shape.offsetted",
"url":52,
"doc":"Args: offset: float, offset towards left if positive, towards right if negative Returns: A new shape. If points of the shape is clockwise, positive offset makes result shape bigger, negative offset makes result shape smaller. If points of the shape is counter-clockwise, positive offset makes result shape smaller, negative offset makes result shape bigger.",
"func":1
},
{
"ref":"fnpcell.geometry.shape.Shape.merge",
"url":52,
"doc":"",
"func":1
},
{
"ref":"fnpcell.geometry.shape.Shape.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.geometry.shape.Shape.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.geometry.shape.Shape.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.geometry.shape.Shape.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.geometry.shape.Shape.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.geometry.shape.Shape.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.hash_code",
"url":67,
"doc":""
},
{
"ref":"fnpcell.hash_code.hash_code",
"url":67,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces",
"url":10,
"doc":"Common interfaces and value types for fnpcell"
},
{
"ref":"fnpcell.interfaces.Unimplemented",
"url":10,
"doc":"Unimplemented(message: str)"
},
{
"ref":"fnpcell.interfaces.Unimplemented.message",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.FrozenDict",
"url":10,
"doc":"An immutable dict which supports hashing"
},
{
"ref":"fnpcell.interfaces.FrozenDict.get",
"url":10,
"doc":"D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None.",
"func":1
},
{
"ref":"fnpcell.interfaces.FrozenDict.freeze",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.cache",
"url":10,
"doc":"Used as cache decorator. Arguments to the cached function must be hashable.",
"func":1
},
{
"ref":"fnpcell.interfaces.is_abstract",
"url":10,
"doc":"Determine whether cls is a abstract class.",
"func":1
},
{
"ref":"fnpcell.interfaces.clamp",
"url":10,
"doc":"Return value \u2208[min, max].",
"func":1
},
{
"ref":"fnpcell.interfaces.angle_between",
"url":10,
"doc":"Return angle in radians",
"func":1
},
{
"ref":"fnpcell.interfaces.distance_between",
"url":10,
"doc":"Return distance between point and origin.",
"func":1
},
{
"ref":"fnpcell.interfaces.midpoint_of",
"url":10,
"doc":"Return middle point of point and origin.",
"func":1
},
{
"ref":"fnpcell.interfaces.normalize_angle",
"url":10,
"doc":"Return angle \u2208[-math.pi, math.pi].",
"func":1
},
{
"ref":"fnpcell.interfaces.IPositioned",
"url":10,
"doc":"IPositioned has a position of (x, y)"
},
{
"ref":"fnpcell.interfaces.IPositioned.position",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPositioned.x",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPositioned.y",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.transform_between",
"url":10,
"doc":"Return transform from device to host.",
"func":1
},
{
"ref":"fnpcell.interfaces.is_dataclass",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IUpdatable",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IUpdatable.updated",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IProcessor",
"url":10,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"fnpcell.interfaces.IProcessor.enter",
"url":10,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"fnpcell.interfaces.IProcessor.exit",
"url":10,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"fnpcell.interfaces.IRunnable",
"url":10,
"doc":"Super class of all element. An IRunnable runs processors to process itself."
},
{
"ref":"fnpcell.interfaces.IRunnable.run",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IRunnableContainer",
"url":10,
"doc":"Super class of containers. An IRunnableContainer runs processors to process itself and its content."
},
{
"ref":"fnpcell.interfaces.IRunnableContainer.content",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IRunnableContainer.run",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IAffineTransformable",
"url":10,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.interfaces.IAffineTransformable.transform",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IAffineTransformable.transform_combined",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IAffineTransformable.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IAffineTransformable.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IAffineTransformable.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IAffineTransformable.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IAffineTransformable.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IAffineTransformable.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IRay",
"url":10,
"doc":"IRay has a position and an orientation"
},
{
"ref":"fnpcell.interfaces.IRay.orientation",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IRay.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IRay.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IShape",
"url":10,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.interfaces.IShape.transform",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IShape.shape_points",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IShape.offsetted",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IShape.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IShape.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IShape.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IShape.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IShape.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IShape.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IRegion",
"url":10,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.interfaces.IRegion.shapes",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IRegion.merged",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IRegion.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IRegion.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IRegion.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IRegion.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IRegion.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IRegion.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ITaperCallable",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.TaperFunctionLinear",
"url":10,
"doc":"TaperFunctionLinear()"
},
{
"ref":"fnpcell.interfaces.TaperFunctionParabolic",
"url":10,
"doc":"TaperFunctionParabolic()"
},
{
"ref":"fnpcell.interfaces.TaperFunction",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.TaperFunction.LINEAR",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.TaperFunction.PARABOLIC",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.SampleInfo",
"url":10,
"doc":"SampleInfo(position: Tuple[float, float], orientation: float, length: float)"
},
{
"ref":"fnpcell.interfaces.SampleInfo.position",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.SampleInfo.orientation",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.SampleInfo.length",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurveLike",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurveLike.curve_length",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurve",
"url":10,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.interfaces.ICurve.transform",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurve.curve_points",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurve.subcurve",
"url":10,
"doc":"return a subcurve between start and end start: start position in length from start end: end position in length from start. If negative, calculate from end",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.sample_at",
"url":10,
"doc":"return sample info at length",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.split_at",
"url":10,
"doc":"return two subcurve at length, if length < 0, abs(length) from end",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.extended",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.first_point",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurve.last_point",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurve.end_orientations",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurve.curve_length",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurve.end_rays",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurve.rail",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.bundle",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.offsetted",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.to_shape",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurve.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurved",
"url":10,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.interfaces.ICurved.raw_curve",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurved.curve",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurved.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurved.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurved.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurved.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurved.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurved.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IElement",
"url":10,
"doc":"Interface of element,element is geometry with layer."
},
{
"ref":"fnpcell.interfaces.IElement.transform",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IElement.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IElement.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IElement.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IElement.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IElement.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IElement.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedElement",
"url":10,
"doc":"Interface of element,element is geometry with layer."
},
{
"ref":"fnpcell.interfaces.ICurvedElement.raw_curve",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurvedElement.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedElement.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedElement.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedElement.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedElement.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedElement.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMaterial",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMaterial.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IElectronicMaterial",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IElectronicMaterial.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPhotonicMaterial",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPhotonicMaterial.refractive_index",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IProcess",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IProcess.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IProcess.value",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IProcess.description",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IProcess.order",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownProcess",
"url":10,
"doc":"UnknownProcess(value: int, description: str =  , order: int = -1, name_template: str = 'Process(value)')"
},
{
"ref":"fnpcell.interfaces.UnknownProcess.value",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownProcess.description",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownProcess.order",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownProcess.name_template",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownProcess.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPurpose",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPurpose.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPurpose.value",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPurpose.description",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPurpose.order",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownPurpose",
"url":10,
"doc":"UnknownPurpose(value: int, description: str =  , order: int = -1, name_template: str = 'Purpose(value)')"
},
{
"ref":"fnpcell.interfaces.UnknownPurpose.value",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownPurpose.description",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownPurpose.order",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownPurpose.name_template",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownPurpose.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILayer",
"url":10,
"doc":"Interface of Layer."
},
{
"ref":"fnpcell.interfaces.ILayer.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILayer.value",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILayer.process",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILayer.purpose",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILayer.description",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILayer.order",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownLayer",
"url":10,
"doc":"UnknownLayer(value: Tuple[int, int], description: str =  , order: int = -1, name_template: str = 'Layer({value[0]}/{value[1]})')"
},
{
"ref":"fnpcell.interfaces.UnknownLayer.value",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownLayer.description",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownLayer.order",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownLayer.name_template",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownLayer.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownLayer.process",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.UnknownLayer.purpose",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILayered",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILayered.layer",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPrimitive",
"url":10,
"doc":"Interface of element,element is geometry with layer."
},
{
"ref":"fnpcell.interfaces.IPrimitive.layer",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPrimitive.with_layer",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IPrimitive.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPrimitive.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPrimitive.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPrimitive.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IPrimitive.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPrimitive.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IGroup",
"url":10,
"doc":"Super class of containers. An IRunnableContainer runs processors to process itself and its content."
},
{
"ref":"fnpcell.interfaces.IGroup.content",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IGroup.ungrouped",
"url":10,
"doc":"ungrouped self in recursion. If there's a sub group in the content, the sub group will be ungrouped too. Return a tuple of IPrimitive.",
"func":1
},
{
"ref":"fnpcell.interfaces.IGroup.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IGroup.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IGroup.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IGroup.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IGroup.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IGroup.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygon",
"url":10,
"doc":"Interface of element,element is geometry with layer."
},
{
"ref":"fnpcell.interfaces.IPolygon.raw_shape",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolygon.shape",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolygon.polygon_points",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolygon.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygon.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygon.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygon.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygon.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygon.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygonSet",
"url":10,
"doc":"Interface of element,element is geometry with layer."
},
{
"ref":"fnpcell.interfaces.IPolygonSet.region",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolygonSet.polygons",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolygonSet.inverted",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygonSet.run",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygonSet.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygonSet.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygonSet.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygonSet.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygonSet.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolygonSet.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolyline",
"url":10,
"doc":"Interface of element,element is geometry with layer."
},
{
"ref":"fnpcell.interfaces.IPolyline.stroke_width",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.final_stroke_width",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.stroke_offset",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.final_stroke_offset",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.taper_function",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.miter_limit",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.extension",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.end_hints",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.curve_length",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.polyline_points",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.end_rays",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPolyline.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolyline.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolyline.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolyline.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolyline.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IPolyline.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.Anchor",
"url":10,
"doc":"Assign where the (0, 0) is. Usage: from fnpcell import all as fp Straight(name= , anchor=fp.Anchor.CENTER,  .)"
},
{
"ref":"fnpcell.interfaces.Anchor.START",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Anchor.CENTER",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Anchor.END",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.VertialAlign",
"url":10,
"doc":"An enumeration."
},
{
"ref":"fnpcell.interfaces.VertialAlign.TOP",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.VertialAlign.MIDDLE",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.VertialAlign.BOTTOM",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.TextBaseline",
"url":10,
"doc":"An enumeration."
},
{
"ref":"fnpcell.interfaces.TextBaseline.TOP",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.TextBaseline.ALPHABETIC",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.TextBaseline.BOTTOM",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IComposite",
"url":10,
"doc":"Super class of containers. An IRunnableContainer runs processors to process itself and its content."
},
{
"ref":"fnpcell.interfaces.IComposite.content",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IComposite.with_ports",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IComposite.with_patches",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IComposite.flatten",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IComposite.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IComposite.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IComposite.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IComposite.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IComposite.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IComposite.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.Hidden",
"url":10,
"doc":"Hidden(name: str)"
},
{
"ref":"fnpcell.interfaces.Hidden.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ITerminal",
"url":10,
"doc":"Base class of pin and port."
},
{
"ref":"fnpcell.interfaces.ITerminal.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ITerminal.shape",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ITerminal.orientation",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ITerminal.hidden",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ITerminal.disabled",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ITerminal.annotation",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ITerminal.matches",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ITerminal.with_name",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ITerminal.with_orientation",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ITerminal.run",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ITerminal.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.ITerminal.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalStack",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalStack.layers",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalStack.connectivity",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalStack.is_metal",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IPin",
"url":10,
"doc":"Base class of pin and port."
},
{
"ref":"fnpcell.interfaces.IPin.metal_line_type",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPin.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IPin.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IPort",
"url":10,
"doc":"Interface of Port."
},
{
"ref":"fnpcell.interfaces.IPort.waveguide_type",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IPort.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IPort.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.Type2TypeMeta",
"url":10,
"doc":"Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses'  these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super( ."
},
{
"ref":"fnpcell.interfaces.ICurvePaint",
"url":10,
"doc":"Base class for protocol classes. Protocol classes are defined as class Proto(Protocol): def meth(self) -> int:  . Such classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example class C: def meth(self) -> int: return 0 def func(x: Proto) -> int: return x.meth() func(C(  Passes static type check See PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as class GenProto(Protocol[T]): def meth(self) -> T:  ."
},
{
"ref":"fnpcell.interfaces.ILinkType",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILinkType.port_width",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IBand",
"url":10,
"doc":"Interface of Band type."
},
{
"ref":"fnpcell.interfaces.IBand.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideType",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideType.straight_factory",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideType.bend_factory",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideType.port_names",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideType.band",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideType.is_isomorphic_to",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideType.is_class_isomorphic_to",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineType",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalLineType.metal_stack",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalLineType.port_names",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalLineType.is_isomorphic_to",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineType.is_class_isomorphic_to",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICell",
"url":10,
"doc":"Super class of containers. An IRunnableContainer runs processors to process itself and its content."
},
{
"ref":"fnpcell.interfaces.ICell.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICell.content",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICell.ports",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICell.bands",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICell.with_name",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICell.with_content",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICell.with_patches",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICell.with_ports",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICell.with_bands",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICell.polygon_set",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICell.new_ref",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICell.new_array",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ILibrary",
"url":10,
"doc":"Super class of containers. An IRunnableContainer runs processors to process itself and its content."
},
{
"ref":"fnpcell.interfaces.ILibrary.content",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellRef",
"url":10,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.interfaces.ICellRef.cell",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellRef.transform",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellRef.frozen",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.ports",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellRef.flatten",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.with_name",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.with_ports",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.with_patches",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.with_bands",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.content_merged",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.polygon_set",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.new_array",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellRef.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedCellRef",
"url":10,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.interfaces.ICurvedCellRef.raw_curve",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICurvedCellRef.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedCellRef.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedCellRef.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedCellRef.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedCellRef.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICurvedCellRef.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILink",
"url":10,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.interfaces.ILink.raw_curve",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILink.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILink.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILink.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILink.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.ILink.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILink.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILinkBetween",
"url":10,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.interfaces.ILinkBetween.raw_curve",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ILinkBetween.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILinkBetween.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILinkBetween.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILinkBetween.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.ILinkBetween.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ILinkBetween.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideLike",
"url":10,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.interfaces.IWaveguideLike.raw_curve",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideLike.curve_length",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideLike.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideLike.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideLike.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideLike.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideLike.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideLike.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineLike",
"url":10,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.interfaces.IMetalLineLike.raw_curve",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalLineLike.curve_length",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalLineLike.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineLike.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineLike.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineLike.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineLike.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineLike.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellArray",
"url":10,
"doc":"Interface of element,element is geometry with layer."
},
{
"ref":"fnpcell.interfaces.ICellArray.cell",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellArray.cols",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellArray.col_end",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellArray.rows",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellArray.row_end",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellArray.transform",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.ICellArray.decompose",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellArray.polygon_set",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellArray.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellArray.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellArray.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellArray.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellArray.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.ICellArray.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwned",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IOwned.owner",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.RelativeTo",
"url":10,
"doc":"An enumeration."
},
{
"ref":"fnpcell.interfaces.RelativeTo.START",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.RelativeTo.PREV",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.RelativeTo.END",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Absolute",
"url":10,
"doc":"Absolute(value: float)"
},
{
"ref":"fnpcell.interfaces.Absolute.value",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Offset",
"url":10,
"doc":"Offset(x: Union[NoneType, float, fnpcell.interfaces.Absolute] = None, y: Union[NoneType, float, fnpcell.interfaces.Absolute] = None, relative_to: fnpcell.interfaces.RelativeTo = fnpcell.interfaces.RelativeTo.PREV)"
},
{
"ref":"fnpcell.interfaces.Offset.x",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Offset.y",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Offset.relative_to",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Offset.from_start",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.Offset.from_end",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.Offset.until_x",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.Offset.until_y",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.Waypoint",
"url":10,
"doc":"Create a Waypoint. x,y is location. a is angle in degrees.",
"func":1
},
{
"ref":"fnpcell.interfaces.Waypoints",
"url":10,
"doc":"Waypoints( args,  kwds)"
},
{
"ref":"fnpcell.interfaces.Waypoints.start",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Waypoints.middle",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Waypoints.end",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal",
"url":10,
"doc":"Base class of pin and port."
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.raw",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.with_name",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.flatten",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.rotated",
"url":10,
"doc":"Rotated both degrees and radians.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.repositioned",
"url":10,
"doc":"Positioned at new point,Owner will translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.h_mirrored",
"url":10,
"doc":"Owner horizontal mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.v_mirrored",
"url":10,
"doc":"Owner vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.c_mirrored",
"url":10,
"doc":"Owner center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedTerminal.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPort",
"url":10,
"doc":"Interface of OwnedPort."
},
{
"ref":"fnpcell.interfaces.IOwnedPort.raw",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IOwnedPort.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPort.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPort.rotated",
"url":10,
"doc":"Rotated both degrees and radians.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPort.repositioned",
"url":10,
"doc":"Positioned at new point,Owner will translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPort.h_mirrored",
"url":10,
"doc":"Owner horizontal mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPort.v_mirrored",
"url":10,
"doc":"Owner vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPort.c_mirrored",
"url":10,
"doc":"Owner center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPin",
"url":10,
"doc":"Base class of pin and port."
},
{
"ref":"fnpcell.interfaces.IOwnedPin.raw",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IOwnedPin.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPin.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPin.rotated",
"url":10,
"doc":"Rotated both degrees and radians.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPin.repositioned",
"url":10,
"doc":"Positioned at new point,Owner will translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPin.h_mirrored",
"url":10,
"doc":"Owner horizontal mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPin.v_mirrored",
"url":10,
"doc":"Owner vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IOwnedPin.c_mirrored",
"url":10,
"doc":"Owner center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.Ray",
"url":10,
"doc":"Ray(position: Tuple[float, float], orientation: float)"
},
{
"ref":"fnpcell.interfaces.Ray.position",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Ray.orientation",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Ray.opposite",
"url":10,
"doc":"Return an IRay with same position but opposite orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.Ray.advanced",
"url":10,
"doc":"Return an IRay with advanced position through orientation",
"func":1
},
{
"ref":"fnpcell.interfaces.Glyph",
"url":10,
"doc":"Glyph(advance_width: float, left_side_bearing: float, right_side_bearing: float, bounding_box: Tuple[Tuple[float, float], Tuple[float, float , highlight_box: Tuple[Tuple[float, float], Tuple[float, float , paths: Tuple[Tuple[Union[Tuple[Literal['Z' , Tuple[Literal['L', 'M'], Tuple[float, float , Tuple[Literal['Q'], Tuple[float, float], Tuple[float, float , Tuple[Literal['C'], Tuple[float, float], Tuple[float, float], Tuple[float, float ],  .],  .])"
},
{
"ref":"fnpcell.interfaces.Glyph.advance_width",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Glyph.left_side_bearing",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Glyph.right_side_bearing",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Glyph.bounding_box",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Glyph.highlight_box",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.Glyph.paths",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IFont",
"url":10,
"doc":"Attributes: name: global unique name for the font, used for  hash and  eq "
},
{
"ref":"fnpcell.interfaces.IFont.name",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IFont.units_per_em",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IFont.ascender",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IFont.descender",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IFont.glyphs",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IBendCurveFactory",
"url":10,
"doc":"Base class for protocol classes. Protocol classes are defined as class Proto(Protocol): def meth(self) -> int:  . Such classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example class C: def meth(self) -> int: return 0 def func(x: Proto) -> int: return x.meth() func(C(  Passes static type check See PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as class GenProto(Protocol[T]): def meth(self) -> T:  ."
},
{
"ref":"fnpcell.interfaces.IStraightWaveguideFactory",
"url":10,
"doc":"Base class for protocol classes. Protocol classes are defined as class Proto(Protocol): def meth(self) -> int:  . Such classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example class C: def meth(self) -> int: return 0 def func(x: Proto) -> int: return x.meth() func(C(  Passes static type check See PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as class GenProto(Protocol[T]): def meth(self) -> T:  ."
},
{
"ref":"fnpcell.interfaces.IBendWaveguideFactory",
"url":10,
"doc":"Base class for protocol classes. Protocol classes are defined as class Proto(Protocol): def meth(self) -> int:  . Such classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example class C: def meth(self) -> int: return 0 def func(x: Proto) -> int: return x.meth() func(C(  Passes static type check See PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as class GenProto(Protocol[T]): def meth(self) -> T:  ."
},
{
"ref":"fnpcell.interfaces.IViasFactory",
"url":10,
"doc":"Base class for protocol classes. Protocol classes are defined as class Proto(Protocol): def meth(self) -> int:  . Such classes are primarily used with static type checkers that recognize structural subtyping (static duck-typing), for example class C: def meth(self) -> int: return 0 def func(x: Proto) -> int: return x.meth() func(C(  Passes static type check See PEP 544 for details. Protocol classes decorated with @typing.runtime_checkable act as simple-minded runtime protocols that check only the presence of given attributes, ignoring their type signatures. Protocol classes can be generic, they are defined as class GenProto(Protocol[T]): def meth(self) -> T:  ."
},
{
"ref":"fnpcell.interfaces.ILinkingPolicy",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween",
"url":10,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.start",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.end",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.with_environment",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IWaveguideBetween.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IAutoVias",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween",
"url":10,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.start",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.end",
"url":10,
"doc":""
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.with_environment",
"url":10,
"doc":"",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.interfaces.IMetalLineBetween.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.internal",
"url":68,
"doc":""
},
{
"ref":"fnpcell.internal.plogic_util",
"url":69,
"doc":""
},
{
"ref":"fnpcell.internal.plogic_util.export_lyp_json",
"url":69,
"doc":"Export lyp file .lyp Usage: lyp_file = Path(__file__).with_name(\"gpdk.lyp\") fp.export_lyp(TECH, file=lyp_file, name_format=\"{layer_name} {layer_no}.{datatype_no}\")",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter",
"url":69,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter.result",
"url":69,
"doc":""
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter.push_ctm",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter.pop_ctm",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter.toplevel",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter.get_cell_name",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter.get_generated_name",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter.enter",
"url":69,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.LayoutWriter.exit",
"url":69,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.export_layout_json",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.gds2json",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter",
"url":69,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.result",
"url":69,
"doc":""
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.instance_naming_table",
"url":69,
"doc":""
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.write_subcircuit",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.push_ctm",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.pop_ctm",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.toplevel",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.get_instance_name",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.get_generated_instance_name",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.get_subcircuit_name",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.get_generated_subcircuit_name",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.enter",
"url":69,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.NetlistWriter.exit",
"url":69,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.export_pls",
"url":69,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.plogic_util.JSONEncoderExt",
"url":69,
"doc":""
},
{
"ref":"fnpcell.internal.plogic_util.JSONEncoderExt.instance_naming_table",
"url":69,
"doc":""
},
{
"ref":"fnpcell.internal.util",
"url":70,
"doc":"This package is mainly for internal usage.  Classes and Functions may move during refactor. "
},
{
"ref":"fnpcell.internal.util.binary_mask_util",
"url":71,
"doc":""
},
{
"ref":"fnpcell.internal.util.binary_mask_util.binary_mask",
"url":71,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.collection_util",
"url":72,
"doc":""
},
{
"ref":"fnpcell.internal.util.collection_util.all_distinct",
"url":72,
"doc":"Determine whether elements is unique elements. if unique elements return true else return false",
"func":1
},
{
"ref":"fnpcell.internal.util.gds_util",
"url":73,
"doc":""
},
{
"ref":"fnpcell.internal.util.gds_util.export_gds",
"url":73,
"doc":"Export gds file .gds. Args: content: Cell Library and CellRef can be used as a content. file: gds file path, both absolute and relative paths are OK. Usage:   from fnpcell import all as fp gds_file = Path(__file__).parent / \"local\" / Path(__file__).with_suffix(\".gds\").name fp.export_gds(library, file=gds_file)  ",
"func":1
},
{
"ref":"fnpcell.internal.util.gds_util.import_from_gds",
"url":73,
"doc":"Import device form gds. Args: file: gds file cell_name: name of cell to be imported, default to the only(raises if multiple) top cell if absent layer_mapper: a callable take a tuple (layer, datatype) as parameter and returns  ILayer or None, layer is filtered out if None is returned Returns An  ICell that imported",
"func":1
},
{
"ref":"fnpcell.internal.util.gds_util.import_from_json",
"url":73,
"doc":"Import device form json file. Args: name: device's name. json_path: json file path. json file like this: { \"library_path\": \"cell.gds\", \"cell_name\": \"cell\", \"layers\": { \" \": \"_ERROR_\", \"0/0\": \"FWG_COR\", }, \"ports\": [ { \"name\": \"op_0\", \"position\": [ 0, 0 ], \"orientation\": { \"degrees\": 180 }, \"waveguide_type\": { \"override\": \"FWG.C.WIRE\", \"values\": { \"core_layout_width\": 0.5 } } } ] } library_path: gds file path, if specified, take precedence. default_layers: default mappling for layers, same structure as layers in json, json take precedence Returns: An instance of the imported cell Usage:   instance = fp.import_from_json(json_path=Path(__file__).with_name(\"cell.json\"  ",
"func":1
},
{
"ref":"fnpcell.internal.util.import_util",
"url":74,
"doc":""
},
{
"ref":"fnpcell.internal.util.import_util.import_function",
"url":74,
"doc":"Return a function. Usage:   fp.import_function(\"layout01.circuits.circuit_01.build_circuit_01.build_circuit_01\")  ",
"func":1
},
{
"ref":"fnpcell.internal.util.layout_util",
"url":75,
"doc":""
},
{
"ref":"fnpcell.internal.util.layout_util.get_bounding_box",
"url":75,
"doc":"Returns bounding box of target. Attributes: target: any drawable instance, such as IPolygon, ICell, ICellRef, ILibrary  . Returns: (x_min,y_min,x_max,y_max) Usage:   (x_min, y_min), (x_max, y_max) = fp.get_bounding_box(cell)  ",
"func":1
},
{
"ref":"fnpcell.internal.util.lyp_util",
"url":76,
"doc":""
},
{
"ref":"fnpcell.internal.util.lyp_util.export_lyp",
"url":76,
"doc":"Export lyp file .lyp Usage: lyp_file = Path(__file__).with_name(\"gpdk.lyp\") fp.export_lyp(TECH, file=lyp_file, name_format=\"{layer_name} {layer_no}.{datatype_no}\")",
"func":1
},
{
"ref":"fnpcell.internal.util.metrics_util",
"url":77,
"doc":""
},
{
"ref":"fnpcell.internal.util.metrics_util.snap_ceil",
"url":77,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.metrics_util.snap_round",
"url":77,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.metrics_util.snap_floor",
"url":77,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.metrics_util.snap_to_grid",
"url":77,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.metrics_util.snap_to_subgrid",
"url":77,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.metrics_util.is_same_grid",
"url":77,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.metrics_util.is_same_subgrid",
"url":77,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.np_util",
"url":78,
"doc":""
},
{
"ref":"fnpcell.internal.util.np_util.angle_between",
"url":78,
"doc":"Return angle in radians",
"func":1
},
{
"ref":"fnpcell.internal.util.np_util.distance_between",
"url":78,
"doc":"Return distance between point and origin.",
"func":1
},
{
"ref":"fnpcell.internal.util.np_util.curvature_of",
"url":78,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.plot_util",
"url":79,
"doc":""
},
{
"ref":"fnpcell.internal.util.plot_util.plot",
"url":79,
"doc":"Matplotlib_shower. Usage: fp.plot(library)",
"func":1
},
{
"ref":"fnpcell.internal.util.pure_compute",
"url":80,
"doc":""
},
{
"ref":"fnpcell.internal.util.pure_compute.pure_compute",
"url":80,
"doc":"Returns result of  fn (), cache it if duration >  threshold (in seconds), using  deps as cache key",
"func":1
},
{
"ref":"fnpcell.internal.util.ray_util",
"url":81,
"doc":""
},
{
"ref":"fnpcell.internal.util.ray_util.intersection_point",
"url":81,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.source_deps",
"url":82,
"doc":""
},
{
"ref":"fnpcell.internal.util.source_deps.DepsFinder",
"url":82,
"doc":"A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found. This function may return a value which is forwarded by the  visit method. This class is meant to be subclassed, with the subclass adding visitor methods. Per default the visitor functions for the nodes are  'visit_' + class name of the node. So a  TryFinally node visit function would be  visit_TryFinally . This behavior can be changed by overriding the  visit method. If no visitor function exists for a node (return value  None ) the  generic_visit visitor is used instead. Don't use the  NodeVisitor if you want to apply changes to nodes during traversing. For this a special visitor exists ( NodeTransformer ) that allows modifications."
},
{
"ref":"fnpcell.internal.util.source_deps.DepsFinder.visit_Import",
"url":82,
"doc":"callback for 'import' statement",
"func":1
},
{
"ref":"fnpcell.internal.util.source_deps.DepsFinder.visit_ImportFrom",
"url":82,
"doc":"callback for 'import from' statement",
"func":1
},
{
"ref":"fnpcell.internal.util.source_deps.collect_deps",
"url":82,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.spc_util",
"url":83,
"doc":""
},
{
"ref":"fnpcell.internal.util.spc_util.export_spc",
"url":83,
"doc":"Export spice file .spc. :param content Cell Library and CellRef can be used as a content. :param file spice file, both absolute and relative paths are OK. :param components pdk's components,if the cell is in components,it's name in .spc file without _x1,_x2. if components=None .spc like this .subckt RingFilter op_0 op_1 op_2 op_3 ep_0 ep_1 .ends .subckt RingFilter_x1 op_0 op_1 op_2 op_3 ep_0 ep_1 .ends RingFilter is different from RingFilter_x1 in in internal structure if components=gpdk.components.all .spc like this,there is no RingFilter_x1 any more. .subckt RingFilter op_0 op_1 op_2 op_3 ep_0 ep_1 .ends Usage: from fnpcell import all as fp import gpdk.components.all spc_file = Path(__file__).parent / \"local\" / Path(__file__).with_suffix(\".spc\").name fp.export_spc(library, file=spc_file\uff0c components=gpdk.components.all)",
"func":1
},
{
"ref":"fnpcell.internal.util.statistics",
"url":84,
"doc":""
},
{
"ref":"fnpcell.internal.util.statistics.statistics",
"url":84,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.statistics.Statistics",
"url":84,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"fnpcell.internal.util.statistics.Statistics.enter",
"url":84,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"fnpcell.internal.util.statistics.Statistics.exit",
"url":84,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"fnpcell.internal.util.statistics.Statistics.result",
"url":84,
"doc":""
},
{
"ref":"fnpcell.internal.util.svrf_util",
"url":85,
"doc":""
},
{
"ref":"fnpcell.internal.util.svrf_util.generate_svrf",
"url":85,
"doc":"Generate svrf file for drc. :param top_cell_name top cell's name. :param gds_filename gds file path,both absolute and relative paths are OK. :param filename .svrf file saved path. Usage: gds_file = Path(__file__).parent / \"local\" / Path(__file__).with_suffix(\".gds\").name svrf_file = Path(__file__).parent / \"local\" / Path(__file__).with_suffix(\".svrf\").name fp.generate_svrf(top_cell_name=\"svrf\", gds_path=gds_file, file=svrf_file)",
"func":1
},
{
"ref":"fnpcell.internal.util.svrf_util.export_svrf_template",
"url":85,
"doc":"export svrf template Usage: fp.export_svrf_template(TECH)",
"func":1
},
{
"ref":"fnpcell.internal.util.terminal_util",
"url":86,
"doc":""
},
{
"ref":"fnpcell.internal.util.terminal_util.turn_angles",
"url":86,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.terminal_util.quadrantize",
"url":86,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.terminal_util.is_face_to_face",
"url":86,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util",
"url":87,
"doc":""
},
{
"ref":"fnpcell.internal.util.test_util.BytesIO",
"url":87,
"doc":"Buffered I/O implementation using an in-memory bytes buffer."
},
{
"ref":"fnpcell.internal.util.test_util.BytesIO.close",
"url":87,
"doc":"Disable all I/O operations.",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.StringIO",
"url":87,
"doc":"Text I/O implementation using an in-memory buffer. The initial_value argument sets the value of object. The newline argument is like the one of TextIOWrapper's constructor."
},
{
"ref":"fnpcell.internal.util.test_util.StringIO.close",
"url":87,
"doc":"Close the IO object. Attempting any further operation after the object is closed will raise a ValueError. This method has no effect if the file is already closed.",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.set_snap_precision",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.get_snap_precision",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.snap_value",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.snap_point",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.snap_points",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.assert_point_eq",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.assert_points_eq",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.assert_angle_eq",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.dummy_port",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.test_util.cell_via_gds",
"url":87,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.time_util",
"url":88,
"doc":""
},
{
"ref":"fnpcell.internal.util.time_util.Timing",
"url":88,
"doc":""
},
{
"ref":"fnpcell.internal.util.waypoint_util",
"url":89,
"doc":""
},
{
"ref":"fnpcell.internal.util.waypoint_util.resolve_waypoints",
"url":89,
"doc":"",
"func":1
},
{
"ref":"fnpcell.internal.util.weakref_util",
"url":90,
"doc":""
},
{
"ref":"fnpcell.internal.util.weakref_util.WeakKeyValueDictionary",
"url":90,
"doc":"Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as class Mapping(Generic[KT, VT]): def __getitem__(self, key: KT) -> VT:  .  Etc. This class can then be used as follows def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default"
},
{
"ref":"fnpcell.internal.util.weakref_util.WeakKeyValueDictionary.get",
"url":90,
"doc":"D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None.",
"func":1
},
{
"ref":"fnpcell.mixin",
"url":91,
"doc":""
},
{
"ref":"fnpcell.mixin.transform_mixin",
"url":92,
"doc":""
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin",
"url":92,
"doc":"IAffineTransformable supports transform, can be scaled, rotated, translated, h_mirrored, v_mirrored, c_mirrored."
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.transform",
"url":92,
"doc":""
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.transform_from_origin",
"url":92,
"doc":"",
"func":1
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.transform_from_at",
"url":92,
"doc":"",
"func":1
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.transform_combined",
"url":92,
"doc":"",
"func":1
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.mixin.transform_mixin.TransformMixin.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.netlist",
"url":93,
"doc":""
},
{
"ref":"fnpcell.netlist.spc_writer",
"url":94,
"doc":""
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter",
"url":94,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.out",
"url":94,
"doc":""
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.close",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.write_subcircuit",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.push_ctm",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.pop_ctm",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.toplevel",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.get_instance_name",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.get_generated_instance_name",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.get_subcircuit_name",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.get_generated_subcircuit_name",
"url":94,
"doc":"",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.enter",
"url":94,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"fnpcell.netlist.spc_writer.SPCWriter.exit",
"url":94,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"fnpcell.pdk",
"url":95,
"doc":"Classes and functions used in creating pdk."
},
{
"ref":"fnpcell.pdk.classconst",
"url":96,
"doc":""
},
{
"ref":"fnpcell.pdk.classconst.classconst",
"url":96,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.collection",
"url":97,
"doc":""
},
{
"ref":"fnpcell.pdk.collection.InstanceSet",
"url":97,
"doc":"An instance container, instance can be added to it. Usage:    create the instance set insts = fp.InstanceSet()  add an anonymous instance insts += instance1  add an instance with a key insts += instance2, \"key\"  get instance back with the registered key, raises LookupError if \"key\" not found assert insts[\"key\"] is instance2  get instance back with the key, returns instance1 as the default assert insts.get(\"badkey\", instance1) is instance1  get first inserted instance, raises LookupError if empty assert insts.first() is instance1  get last inserted instance, raises LookupError if empty assert insts.last() is instance2  "
},
{
"ref":"fnpcell.pdk.collection.InstanceSet.validate",
"url":97,
"doc":"Determine value whether a cell reference",
"func":1
},
{
"ref":"fnpcell.pdk.collection.InstanceSet.new",
"url":97,
"doc":"Create a instance container",
"func":1
},
{
"ref":"fnpcell.pdk.collection.ElementSet",
"url":97,
"doc":"A element container, element can be add to it. Usage: elems = fp.ElementSet() elems += element"
},
{
"ref":"fnpcell.pdk.collection.ElementSet.validate",
"url":97,
"doc":"Determine value whether a element",
"func":1
},
{
"ref":"fnpcell.pdk.collection.ElementSet.new",
"url":97,
"doc":"Create a element container",
"func":1
},
{
"ref":"fnpcell.pdk.collection.PortSet",
"url":97,
"doc":"A port container, port can be add to it. When create a new device(CellRef) this is must. Usage:   ports = fp.PortSet() port_0 = fp.Port(name=\"op_0\",  .) ports += port_0  using port.name as key assert ports[\"op_0\"] is port_0 port_1 = fp.Port(name=\"op_1\",  .) ports += port_1, \"opt_1\"  assign a key assert ports[\"opt_1\"] is port_1  "
},
{
"ref":"fnpcell.pdk.collection.PortSet.validate",
"url":97,
"doc":"Determine value whether a port",
"func":1
},
{
"ref":"fnpcell.pdk.collection.PortSet.new",
"url":97,
"doc":"Create a port container",
"func":1
},
{
"ref":"fnpcell.pdk.connected",
"url":98,
"doc":""
},
{
"ref":"fnpcell.pdk.connected.Connected",
"url":98,
"doc":"This is connected function, return cell reference. This function is used to connect one port in the CellRef to the port in the another CellRef. Args: joints: in form [ cell1[\"op_0\"] <= cell2[\"op_0\"], cell1[\"op_1\"] <= cell2[\"op_1\"], ] Usage:   device_connected = fp.Connected( joints=[ cell1[\"op_0\"] <= cell2[\"op_0\"], ], ports=[] )  ",
"func":1
},
{
"ref":"fnpcell.pdk.const_property",
"url":99,
"doc":""
},
{
"ref":"fnpcell.pdk.const_property.const_property",
"url":99,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.create_links",
"url":100,
"doc":""
},
{
"ref":"fnpcell.pdk.create_links.LinkBetween",
"url":100,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.create_links.create_links",
"url":100,
"doc":"Create links between ports and returns all generated links. Args: flyline_layer: Optional, flyline is generated if there's no spacing to insert bend/transition/taper etc. If absent, default to use  TECH.LAYER.FLYLINE_MARK linking_policy: Optional, providing default link_type and default bend_factory for each port pairs. If absent, TECH.LINKING_POLICY.DEFAULT will be used. link_type: Optional, waveguide type to be used to generate waveguide links.  LinkBetween has a parameter  link_type which has priority over  Linked 's  link_type . bend_factory: Optional, a factory function to generate bend. specs: like this [cell1[\"op_0\"] >> cell2[\"op_0\"], cell1[\"op_1\"] >> cell2[\"op_1\"],] or [cell1[\"op_0\"] >> to(750, 300, 0) >> cell1[\"op_0\"],] metal_line_width: Optional, default line width of metal line links which are generated from pin pairs. If absent, default to use  TECH.METAL.DEFAULT_LINE_WIDTH metal_min_distance: Optional, default minimum distance before turning around.  LinkBetween has a parameter  min_distance which has priority over  metal_min_distance . AssertionError will be raised if neither  min_distance nor  metal_min_distance is provided metal_start_distance: Optional, default minimum distance (from start port) before turning around.  LinkBetween has a parameter  start_distance which has priority over  metal_start_distance . AssertionError will be raised if neither  start_distance nor  metal_start_distance is provided metal_end_distance: Optional, default minimum distance (from end port) before turning around.  LinkBetween has a parameter  end_distance which has priority over  metal_end_distance . AssertionError will be raised if neither  end_distance nor  metal_end_distance is provided metal_via_spacing: Optional, default via spacing. This affects how vias are inserted: less vias for larger via spacing  LinkBetween has a parameter  via_spacing which has priority over  metal_via_spacing . AssertionError will be raised if neither  via_spacing nor  metal_via_spacing is provided metal_overlap_distance: Optional, default overlap distance when metal line go to another layer. This affects how vias are inserted: more vias for larger overlap distance  LinkBetween has a parameter  overlap_distance which has priority over  metal_overlap_distance . AssertionError will be raised if neither  overlap_distance nor  metal_overlap_distance is provided auto_vias: Optional, a registry contains functions which generate vias for a specific layer pair.  LinkBetween has a parameter  auto_vias which has priority over  Linke 's  auto_vias . AssertionError will be raised if neither is provided auto_metal_line_type: Optional, a registry contains metal line type for a specific layer.  LinkBetween has a parameter  auto_metal_line_type which has priority over  Linke 's  auto_metal_line_type . AssertionError will be raised if neither is provided Returns: All generated links Usage:   links = fp.create_links( link_type=TECH.WG.MWG.C.WIRE, bend_type=TECH.WG.MWG.C.WIRE, specs=[ cell1[\"op_0\"] >> cell2[\"op_0\"], ], )  ",
"func":1
},
{
"ref":"fnpcell.pdk.create_links.from_linkspecs",
"url":100,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.linked",
"url":101,
"doc":""
},
{
"ref":"fnpcell.pdk.linked.Linked",
"url":101,
"doc":"Create links between ports and returns an device including all used devices and generated links. Args: name: default to \"Linked\", the name of generated cell flyline_layer: Optional, flyline is generated if there's no spacing to insert bend/transition/taper etc. If absent, default to use  TECH.LAYER.FLYLINE_MARK linking_policy: Optional, providing default link_type and default bend_factory for each port pairs. If absent, TECH.LINKING_POLICY.DEFAULT will be used. link_type: Optional, waveguide type to be used to generate waveguide links.  LinkBetween has a parameter  link_type which has priority over  Linked 's  link_type . bend_factory: Optional, a factory function to generate bend. links: like this [cell1[\"op_0\"] >> cell2[\"op_0\"], cell1[\"op_1\"] >> cell2[\"op_1\"],] or [cell1[\"op_0\"] >> to(750, 300, 0) >> cell1[\"op_0\"],] metal_line_width: Optional, default line width of metal line links which are generated from pin pairs. If absent, default to use  TECH.METAL.DEFAULT_LINE_WIDTH metal_min_distance: Optional, default minimum distance before turning around.  LinkBetween has a parameter  min_distance which has priority over  metal_min_distance . AssertionError will be raised if neither  min_distance nor  metal_min_distance is provided metal_start_distance: Optional, default minimum distance (from start port) before turning around.  LinkBetween has a parameter  start_distance which has priority over  metal_start_distance . AssertionError will be raised if neither  start_distance nor  metal_start_distance is provided metal_end_distance: Optional, default minimum distance (from end port) before turning around.  LinkBetween has a parameter  end_distance which has priority over  metal_end_distance . AssertionError will be raised if neither  end_distance nor  metal_end_distance is provided metal_via_spacing: Optional, default via spacing. This affects how vias are inserted: less vias for larger via spacing  LinkBetween has a parameter  via_spacing which has priority over  metal_via_spacing . AssertionError will be raised if neither  via_spacing nor  metal_via_spacing is provided metal_overlap_distance: Optional, default overlap distance when metal line go to another layer. This affects how vias are inserted: more vias for larger overlap distance  LinkBetween has a parameter  overlap_distance which has priority over  metal_overlap_distance . AssertionError will be raised if neither  overlap_distance nor  metal_overlap_distance is provided auto_vias: Optional, a registry contains functions which generate vias for a specific layer pair.  LinkBetween has a parameter  auto_vias which has priority over  Linke 's  auto_vias . AssertionError will be raised if neither is provided auto_metal_line_type: Optional, a registry contains metal line type for a specific layer.  LinkBetween has a parameter  auto_metal_line_type which has priority over  Linke 's  auto_metal_line_type . AssertionError will be raised if neither is provided ports: Required, public ports of the transform: Optional, transform of the generated device Returns: An ICellRef/IDevice including the generated links and source devices whose ports are used to generate the links. Usage:   device_linked = fp.Linked( link_type=TECH.WG.MWG.C.WIRE, bend_factory=TECH.WG.MWG.C.WIRE.BEND_CIRCULAR, links=[ cell1[\"op_0\"] >> cell2[\"op_0\"], ], ports=[ cell1[\"op_1\"].with_name(\"op_0\"), cell2[\"op_1\"] ] )  ",
"func":1
},
{
"ref":"fnpcell.pdk.link_between",
"url":102,
"doc":"LinkBetween implementations for waveguide and metal line."
},
{
"ref":"fnpcell.pdk.link_between.flyline",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline",
"url":103,
"doc":"Flyline(start: fnpcell.interfaces.ITerminal, end: fnpcell.interfaces.ITerminal, waypoints: Tuple[Tuple[float, float],  .], layer: fnpcell.interfaces.ILayer, port_names: Tuple[Union[NoneType, str, fnpcell.interfaces.Hidden], Union[NoneType, str, fnpcell.interfaces.Hidden , stroke_width: float = 0.5, transform: fnpcell.transform.Affine2D = Affine2D.identity(), patches: Tuple[fnpcell.interfaces.IElement,  .] = (), name: str = 'flyline')"
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.start",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.end",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.waypoints",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.layer",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.port_names",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.stroke_width",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.transform",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.patches",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.name",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.raw_curve",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.curve_length",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.cell",
"url":103,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.with_name",
"url":103,
"doc":"Return a new cell with the given name",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.with_ports",
"url":103,
"doc":"Return a new cell with the given ports",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.with_patches",
"url":103,
"doc":"Add content",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.with_bands",
"url":103,
"doc":"Add bands",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.ports",
"url":11,
"doc":"Return owned ports of the cell reference."
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.flatten",
"url":11,
"doc":"Return a new cell reference with transformed content and identity transform to itself. Useful to fix the \"1nm gap\" due to gds spec This method only flatten one level, not recursively flatten all content. Examples: >>> new_device = device.flatten()",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.transform_combined",
"url":11,
"doc":"Return a new cell reference with a new transform which is its transform combined with the given transform",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.content_merged",
"url":11,
"doc":"Return a new cell reference with close elements on same layer merged into polygons. Multiple layers can be provided and elements on each layer will be merged into polygons seperately. examples: >>> new_device = device.content_merged(affected_layer=TECH.LAYER.FWG_CORE) >>> new_device = device.content_merged(affected_layer=[TECH.LAYER.FWG_CORE, TECH.LAYER.SWG_CORE])",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.new_array",
"url":11,
"doc":"Return a new cell reference array",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.flyline.Flyline.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween",
"url":104,
"doc":"MetalLineBetween(start: fnpcell.interfaces.IPin, end: fnpcell.interfaces.IPin, waypoints: Tuple[Union[fnpcell.interfaces.IRay, fnpcell.interfaces.Offset],  .] = (), flyline_layer: Union[fnpcell.interfaces.ILayer, NoneType] = None, metal_line_spec: Union[Tuple[Tuple[float, fnpcell.interfaces.IMetalLineType],  .], NoneType] = None, min_distance: Union[float, NoneType] = None, start_distance: Union[float, NoneType] = None, end_distance: Union[float, NoneType] = None, fitting_function: Union[Callable Tuple[Tuple[float, float],  . , fnpcell.interfaces.ICurve], NoneType] = None, auto_vias: Union[fnpcell.pdk.technology.auto_vias.AutoVias, NoneType] = None, target_length: Union[float, NoneType] = None, transform: fnpcell.transform.Affine2D = Affine2D.identity(), name: str = 'LinkBetween', bands: Union[FrozenSet[fnpcell.interfaces.IBand], NoneType] = None, patches: Tuple[fnpcell.interfaces.IElement,  .] = (), port_names: Tuple[Union[NoneType, str, fnpcell.interfaces.Hidden], Union[NoneType, str, fnpcell.interfaces.Hidden = ('ep_0', 'ep_1' "
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.start",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.end",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.waypoints",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.flyline_layer",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.metal_line_spec",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.min_distance",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.start_distance",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.end_distance",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.fitting_function",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.auto_vias",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.target_length",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.transform",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.name",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.bands",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.patches",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.port_names",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.cell",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.with_name",
"url":104,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.with_ports",
"url":104,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.with_patches",
"url":104,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.with_bands",
"url":104,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.with_environment",
"url":104,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.curve_length",
"url":104,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.ports",
"url":11,
"doc":"Return owned ports of the cell reference."
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.flatten",
"url":11,
"doc":"Return a new cell reference with transformed content and identity transform to itself. Useful to fix the \"1nm gap\" due to gds spec This method only flatten one level, not recursively flatten all content. Examples: >>> new_device = device.flatten()",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.transform_combined",
"url":11,
"doc":"Return a new cell reference with a new transform which is its transform combined with the given transform",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.content_merged",
"url":11,
"doc":"Return a new cell reference with close elements on same layer merged into polygons. Multiple layers can be provided and elements on each layer will be merged into polygons seperately. examples: >>> new_device = device.content_merged(affected_layer=TECH.LAYER.FWG_CORE) >>> new_device = device.content_merged(affected_layer=[TECH.LAYER.FWG_CORE, TECH.LAYER.SWG_CORE])",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.MetalLineBetween.new_array",
"url":11,
"doc":"Return a new cell reference array",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.new_metal_line_between",
"url":104,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.metal.new_distinct_points",
"url":104,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween",
"url":105,
"doc":"WaveguideBetween(start: fnpcell.interfaces.IPort, end: fnpcell.interfaces.IPort, waypoints: Tuple[Union[fnpcell.interfaces.IRay, fnpcell.interfaces.Offset],  .] = (), flyline_layer: Union[fnpcell.interfaces.ILayer, NoneType] = None, linking_policy: Union[fnpcell.pdk.technology.auto_link.LinkingPolicy, NoneType] = None, auto_transition: Union[fnpcell.pdk.technology.auto_transition.AutoTransition, NoneType] = None, link_type: Union[fnpcell.interfaces.IWaveguideType, NoneType] = None, straight_factory: Union[fnpcell.interfaces.IStraightWaveguideFactory, NoneType] = None, bend_factory: Union[fnpcell.interfaces.IBendWaveguideFactory, NoneType] = None, target_length: Union[float, NoneType] = None, transform: fnpcell.transform.Affine2D = Affine2D.identity(), name: str = 'LinkBetween', bands: Union[FrozenSet[fnpcell.interfaces.IBand], NoneType] = None, patches: Tuple[fnpcell.interfaces.IElement,  .] = (), port_names: Tuple[Union[NoneType, str, fnpcell.interfaces.Hidden], Union[NoneType, str, fnpcell.interfaces.Hidden = ('op_0', 'op_1' "
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.start",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.end",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.waypoints",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.flyline_layer",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.linking_policy",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.auto_transition",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.link_type",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.straight_factory",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.bend_factory",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.target_length",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.transform",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.name",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.bands",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.patches",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.port_names",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.raw_curve",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.cell",
"url":105,
"doc":""
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.with_name",
"url":105,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.with_ports",
"url":105,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.with_patches",
"url":105,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.with_bands",
"url":105,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.with_environment",
"url":105,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.ports",
"url":11,
"doc":"Return owned ports of the cell reference."
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.flatten",
"url":11,
"doc":"Return a new cell reference with transformed content and identity transform to itself. Useful to fix the \"1nm gap\" due to gds spec This method only flatten one level, not recursively flatten all content. Examples: >>> new_device = device.flatten()",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.transform_combined",
"url":11,
"doc":"Return a new cell reference with a new transform which is its transform combined with the given transform",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.content_merged",
"url":11,
"doc":"Return a new cell reference with close elements on same layer merged into polygons. Multiple layers can be provided and elements on each layer will be merged into polygons seperately. examples: >>> new_device = device.content_merged(affected_layer=TECH.LAYER.FWG_CORE) >>> new_device = device.content_merged(affected_layer=[TECH.LAYER.FWG_CORE, TECH.LAYER.SWG_CORE])",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.WaveguideBetween.new_array",
"url":11,
"doc":"Return a new cell reference array",
"func":1
},
{
"ref":"fnpcell.pdk.link_between.wg.new_waveguide_between",
"url":105,
"doc":"LinkBetween function. this function is used to link two ports auto link. Args: waypoints: to appoint the auto link's waypoint that auto link go through. link_type: which waveguide type be used to this link. bend_type: which bend's waveguide type be used to this link. target_length: this link's length. flyline_layer: the flyline layer. if linked failed a flyline will got between on ports. Usage: fp.LinkBetween(start=cell1[\"op_1\"], end=cell2[\"op_0\"], bend_factory=TECH.WG.MWG.C.WIRE.BEND_EULER), Returns: An instance of  LinkBetween or None when  start and  end matches directly",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth",
"url":106,
"doc":"LinkSmooth(control_points: Tuple[Tuple[float, float],  .], link_type: fnpcell.interfaces.IWaveguideType, straight_factory: fnpcell.interfaces.IStraightWaveguideFactory, bend_factory: fnpcell.interfaces.IBendWaveguideFactory, transform: fnpcell.transform.Affine2D, name: str = 'LinkSmooth', start_type: Union[fnpcell.interfaces.IWaveguideType, NoneType] = None, end_type: Union[fnpcell.interfaces.IWaveguideType, NoneType] = None, port_names: Sequence[Union[NoneType, str, fnpcell.interfaces.Hidden = ('op_0', 'op_1'), auto_transition: Union[fnpcell.pdk.technology.auto_transition.AutoTransition, NoneType] = None, bands: Union[FrozenSet[fnpcell.interfaces.IBand], NoneType] = None, patches: Tuple[fnpcell.interfaces.IElement,  .] = ( "
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.control_points",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.link_type",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.straight_factory",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.bend_factory",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.transform",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.name",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.start_type",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.end_type",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.port_names",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.auto_transition",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.bands",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.patches",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.raw_curve",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.cell",
"url":106,
"doc":""
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.with_name",
"url":106,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.with_ports",
"url":106,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.with_patches",
"url":106,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.with_bands",
"url":106,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.ports",
"url":11,
"doc":"Return owned ports of the cell reference."
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.flatten",
"url":11,
"doc":"Return a new cell reference with transformed content and identity transform to itself. Useful to fix the \"1nm gap\" due to gds spec This method only flatten one level, not recursively flatten all content. Examples: >>> new_device = device.flatten()",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.transform_combined",
"url":11,
"doc":"Return a new cell reference with a new transform which is its transform combined with the given transform",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.content_merged",
"url":11,
"doc":"Return a new cell reference with close elements on same layer merged into polygons. Multiple layers can be provided and elements on each layer will be merged into polygons seperately. examples: >>> new_device = device.content_merged(affected_layer=TECH.LAYER.FWG_CORE) >>> new_device = device.content_merged(affected_layer=[TECH.LAYER.FWG_CORE, TECH.LAYER.SWG_CORE])",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.LinkSmooth.new_array",
"url":11,
"doc":"Return a new cell reference array",
"func":1
},
{
"ref":"fnpcell.pdk.link_smooth.new_link_smooth",
"url":106,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.named_const",
"url":107,
"doc":""
},
{
"ref":"fnpcell.pdk.named_const.named_const",
"url":107,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell",
"url":108,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell.PCell",
"url":108,
"doc":"PCell is the base class of any dataclass form pcell. User-defined dataclass pcell needs to implement the build method which returns a tuple of  fp.InstanceSet ,  fp.ElementSet and  fp.PortSet When define a dataclass pcell,  eq parameter of decorator  dataclass should be False to fallback to PCell's  __hash__ and  __eq__ . There is a lifecycle callback method  __pcell_post_init__ () which is called after all fields be resolved, and can be used to validate fields or do some post processing.  important  Never use  dataclasses.replace to get an updated pcell, use  PCell.updated instead. Usage:   from fnpcell import all as fp @fp.pcell_class() @dataclass(eq=False) class UserDefinedPCell(fp.PCell): def build(self): insts, elems, ports = super().build()  . return insts, elems, ports  "
},
{
"ref":"fnpcell.pdk.pcell.PCell.name",
"url":108,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell.PCell.bands",
"url":108,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell.PCell.patches",
"url":108,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell.PCell.port_names",
"url":108,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell.PCell.transform",
"url":108,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell.PCell.updated",
"url":108,
"doc":"Returns an updated pcell by replace fields with  kwargs Use  updated to update pcell and  never use   dataclasses.replace  ",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.frozen",
"url":108,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.build",
"url":108,
"doc":"Abstract method must be implemented to build a pcell.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.cell",
"url":108,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell.PCell.with_name",
"url":108,
"doc":"Returns a new pcell with the given  name .",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.with_ports",
"url":108,
"doc":"Returns a new pcell with the given port options.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.with_patches",
"url":108,
"doc":"Returns a new pcell with  content added as patches.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.with_bands",
"url":108,
"doc":"Returns a new pcell with bands.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.ports",
"url":11,
"doc":"Return owned ports of the cell reference."
},
{
"ref":"fnpcell.pdk.pcell.PCell.flatten",
"url":11,
"doc":"Return a new cell reference with transformed content and identity transform to itself. Useful to fix the \"1nm gap\" due to gds spec This method only flatten one level, not recursively flatten all content. Examples: >>> new_device = device.flatten()",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.transform_combined",
"url":11,
"doc":"Return a new cell reference with a new transform which is its transform combined with the given transform",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.content_merged",
"url":11,
"doc":"Return a new cell reference with close elements on same layer merged into polygons. Multiple layers can be provided and elements on each layer will be merged into polygons seperately. examples: >>> new_device = device.content_merged(affected_layer=TECH.LAYER.FWG_CORE) >>> new_device = device.content_merged(affected_layer=[TECH.LAYER.FWG_CORE, TECH.LAYER.SWG_CORE])",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.new_array",
"url":11,
"doc":"Return a new cell reference array",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell.PCell.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_class",
"url":109,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_class.pcell_class",
"url":109,
"doc":"A decorator which is required for defining dataclass pcells Args: band: Optional, band of the device, maybe single band or a list of band that the device supports. If provided, pcell runtime might add some visual annotion to the cell using  TECH.DEVICE.band_annotation method. And would check every optical port of the device to ensure none of them has wrong band  TECH.DEVICE.band_annotation can be redefine in technology to provide customized visual annotation see  gpdk.technology.device.DEVICE Usage:   from fnpcell import all as fp @fp.pcell_class(band=TECH.BAND.C) class UserDefinedClass(fp.PCell): def build(self): insts, elems, ports = super().build()  . return insts, elems, ports  ",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_interfaces",
"url":110,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_meta",
"url":111,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_meta.PCellMeta",
"url":111,
"doc":"Metaclass for dataclass pcell."
},
{
"ref":"fnpcell.pdk.pcell_params",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IParam",
"url":112,
"doc":"Attributes: type: Optional, parameter value must be instance of  type if provided required: True, parameter value must not be None, if  required is True default: Optional, default value if parameter is not provided default_factory: str or Callable, defaults to \"\\_default\\_{name}\" If  default_factory is Callable, then it will be called during parameter resolution. If  default_factory is str, then: - In functional pcell, it will be ignored. - In dataclass pcell,  default_factory will be formated with parameter name, and if a method of pcell has that name, it will be called and the return value is used as default value. If both  default and  default_factory is provided, then: - In functional pcell,  default_factory is called first, if it returns None, then  default is used. - In dataclass pcell,  default is used as initial value, then  default_factory is called to get the frozen value. If it returns None, then  default is used. preprocessor: Optional, will be called on user-provided parameter value before default value resolution and validation. User may provide None as parameter value, and  preprocessor should handle that. If  preprocessor returns None, the parameter is treated as not provided by user and will run default value resolution. doc: Optional, user provided short document text."
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.required",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.default_factory",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.preprocessor",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.frozen",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.doc",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.IParam.as_field",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.Param",
"url":112,
"doc":"General parameter definition If there's no proper XXXParam, then use  Param . See  IParam for details."
},
{
"ref":"fnpcell.pdk.pcell_params.Param.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.Param.required",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.Param.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.Param.default_factory",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.Param.preprocessor",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.Param.frozen",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.Param.doc",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.BooleanParam",
"url":112,
"doc":"Parameter for boolean See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.BooleanParam.type",
"url":112,
"doc":"bool(x) -> bool Returns True when the argument x is true, False otherwise. The builtins True and False are the only two instances of the class bool. The class bool is a subclass of the class int, and cannot be subclassed."
},
{
"ref":"fnpcell.pdk.pcell_params.BooleanParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.BooleanParam.doc",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.LayerParam",
"url":112,
"doc":"Parameter for Layer See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.LayerParam.type",
"url":112,
"doc":"Interface of Layer."
},
{
"ref":"fnpcell.pdk.pcell_params.LayerParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.WaveguideTypeParam",
"url":112,
"doc":"Parameter for WaveguideType See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.WaveguideTypeParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.WaveguideTypeParam.band",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.WaveguideTypeParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.MetalLineTypeParam",
"url":112,
"doc":"Parameter for MetalLineType See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.MetalLineTypeParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.MetalLineTypeParam.band",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.MetalLineTypeParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.AnchorParam",
"url":112,
"doc":"Parameter for Anchor. See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.AnchorParam.type",
"url":112,
"doc":"Assign where the (0, 0) is. Usage: from fnpcell import all as fp Straight(name= , anchor=fp.Anchor.CENTER,  .)"
},
{
"ref":"fnpcell.pdk.pcell_params.AnchorParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositionParam",
"url":112,
"doc":"Parameter for Position See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.PositionParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositionParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositionParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.PointsParam",
"url":112,
"doc":"Parameter for Point See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.PointsParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PointsParam.min_count",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PointsParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PointsParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.PointsParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.PortOptionsParam",
"url":112,
"doc":"Parameter for PortOptions, eg: ports=(None, \"op_1\") None will disable port in the position See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.PortOptionsParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PortOptionsParam.count",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PortOptionsParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PortOptionsParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.PortOptionsParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.TransformParam",
"url":112,
"doc":"Parameter for Transformations See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.TransformParam.type",
"url":112,
"doc":"Affine2D transformation matrix. Usage:   from fnpcell import all as fp t = fp.translate(10, 0) r = fp.rotate(degrees=30) transform = t @ r assert transform  fp.translate(10, 0).rotate(degrees=30) points = [(0, 0), (1, 0), (1, 1)] transformed_points = transform(points)  equals to transform.transform_points(points)  "
},
{
"ref":"fnpcell.pdk.pcell_params.TransformParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.TransformParam.required",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.TransformParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.TextParam",
"url":112,
"doc":"Parameter for Text See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.TextParam.type",
"url":112,
"doc":"str(object= ) -> str str(bytes_or_buffer[, encoding[, errors ) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'."
},
{
"ref":"fnpcell.pdk.pcell_params.TextParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.TextParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.NameParam",
"url":112,
"doc":"Parameter for PCell Name See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.NameParam.prefix",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NameParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NameParam.required",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NameParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.NameParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.NameParam.type",
"url":112,
"doc":"str(object= ) -> str str(bytes_or_buffer[, encoding[, errors ) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'."
},
{
"ref":"fnpcell.pdk.pcell_params.NameListParam",
"url":112,
"doc":"Parameter for Name List, eg. [\"op_0\", \"op_1\", \"op_2\", \"op_3\"] See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.NameListParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NameListParam.min_count",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NameListParam.max_count",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NameListParam.count",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NameListParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NameListParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.NameListParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.DeviceParam",
"url":112,
"doc":"Parameter for Device See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.DeviceParam.type",
"url":112,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.pdk.pcell_params.DeviceParam.factory",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.DeviceParam.port_count",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.DeviceParam.pin_count",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.DeviceParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.DeviceParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.ListParam",
"url":112,
"doc":"Parameter for List See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.ListParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.ListParam.element_type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.ListParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.ListParam.immutable",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.ListParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.ListParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.SetParam",
"url":112,
"doc":"Parameter for Set See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.SetParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.SetParam.element_type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.SetParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.SetParam.immutable",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.SetParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.SetParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.MappingParam",
"url":112,
"doc":"Parameter for Mapping See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.MappingParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.MappingParam.K",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.MappingParam.V",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.MappingParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.MappingParam.immutable",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.MappingParam.resolve",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.MappingParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.FloatParam",
"url":112,
"doc":"Parameter for Float See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.FloatParam.type",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.FloatParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.FloatParam.min",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.FloatParam.max",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.FloatParam.invalid",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.FloatParam.precision",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.FloatParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.IntParam",
"url":112,
"doc":"Parameter for Integer See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.IntParam.min",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IntParam.max",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IntParam.invalid",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IntParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.IntParam.validate",
"url":112,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveFloatParam",
"url":112,
"doc":"Parameter for Positive Float See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveFloatParam.min",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveFloatParam.max",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveFloatParam.invalid",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveFloatParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegFloatParam",
"url":112,
"doc":"Parameter for non negative Float See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegFloatParam.min",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegFloatParam.max",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegFloatParam.invalid",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegFloatParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveIntParam",
"url":112,
"doc":"Parameter for Positive Float See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveIntParam.min",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveIntParam.max",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveIntParam.invalid",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.PositiveIntParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegIntParam",
"url":112,
"doc":"Parameter for non negative Float See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegIntParam.min",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegIntParam.max",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegIntParam.invalid",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.NonNegIntParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.DegreeParam",
"url":112,
"doc":"Parameter for Angle in Degrees See  IParam for details"
},
{
"ref":"fnpcell.pdk.pcell_params.DegreeParam.min",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.DegreeParam.max",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.DegreeParam.invalid",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_params.DegreeParam.default",
"url":112,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_runtime",
"url":113,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_runtime.PCellRuntime",
"url":113,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_runtime.PCellRuntime.check_parameters",
"url":113,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.pcell_runtime.ParallelExecution",
"url":113,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_runtime.ParallelExecution.executor",
"url":113,
"doc":""
},
{
"ref":"fnpcell.pdk.pcell_runtime.ParallelExecution.submit",
"url":113,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.place",
"url":114,
"doc":""
},
{
"ref":"fnpcell.pdk.place.place",
"url":114,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.reexport",
"url":115,
"doc":""
},
{
"ref":"fnpcell.pdk.reexport.reexport",
"url":115,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.route",
"url":116,
"doc":""
},
{
"ref":"fnpcell.pdk.route.route",
"url":116,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.route.lengthen_route",
"url":116,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.route.angle_or_none",
"url":116,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.route.is_intersection",
"url":116,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.staticconst",
"url":117,
"doc":""
},
{
"ref":"fnpcell.pdk.staticconst.staticconst",
"url":117,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology",
"url":118,
"doc":"Classes and functions used in creating pdk technology."
},
{
"ref":"fnpcell.pdk.technology.all",
"url":119,
"doc":"reexport classes and functions to public"
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor",
"url":119,
"doc":"An enumeration."
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.BLACK",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.NAVY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.BLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.GREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.TEAL",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKCYAN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DEEPSKYBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKTURQUOISE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMSPRINGGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SPRINGGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.CYAN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MIDNIGHTBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DODGERBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTSEAGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.FORESTGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SEAGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKSLATEGRAY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIMEGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMSEAGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.TURQUOISE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.ROYALBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.STEELBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKSLATEBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMTURQUOISE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.INDIGO",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKOLIVEGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.CADETBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.CORNFLOWERBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.REBECCAPURPLE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMAQUAMARINE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DIMGRAY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SLATEBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.OLIVEDRAB",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SLATEGRAY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTSLATEGRAY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMSLATEBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LAWNGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.CHARTREUSE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.AQUAMARINE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MAROON",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PURPLE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.OLIVE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.GRAY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SKYBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTSKYBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.BLUEVIOLET",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKRED",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKMAGENTA",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SADDLEBROWN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKSEAGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMPURPLE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKVIOLET",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PALEGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKORCHID",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.YELLOWGREEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SIENNA",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.BROWN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKGRAY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.GREENYELLOW",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PALETURQUOISE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTSTEELBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.POWDERBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.FIREBRICK",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKGOLDENROD",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMORCHID",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.ROSYBROWN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKKHAKI",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SILVER",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MEDIUMVIOLETRED",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.INDIANRED",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PERU",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.CHOCOLATE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.TAN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTGRAY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.THISTLE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.ORCHID",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.GOLDENROD",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PALEVIOLETRED",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.CRIMSON",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.GAINSBORO",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PLUM",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.BURLYWOOD",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTCYAN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LAVENDER",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKSALMON",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.VIOLET",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PALEGOLDENROD",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTCORAL",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.KHAKI",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.ALICEBLUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.HONEYDEW",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.AZURE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SANDYBROWN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.WHEAT",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.BEIGE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.WHITESMOKE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MINTCREAM",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.GHOSTWHITE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SALMON",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.ANTIQUEWHITE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LINEN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTGOLDENRODYELLOW",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.OLDLACE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.RED",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.FUCHSIA",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MAGENTA",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DEEPPINK",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.ORANGERED",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.TOMATO",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.HOTPINK",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.CORAL",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.DARKORANGE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTSALMON",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.ORANGE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTPINK",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PINK",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.GOLD",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PEACHPUFF",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.NAVAJOWHITE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MOCCASIN",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.BISQUE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.MISTYROSE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.BLANCHEDALMOND",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.PAPAYAWHIP",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LAVENDERBLUSH",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SEASHELL",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.CORNSILK",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LEMONCHIFFON",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.FLORALWHITE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.SNOW",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.YELLOW",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.LIGHTYELLOW",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.IVORY",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.all.NamedColor.WHITE",
"url":119,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.auto_link",
"url":120,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.auto_link.LinkingPolicy",
"url":120,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.auto_link.LinkingPolicy.updated",
"url":120,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.auto_metal_line_type",
"url":121,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.auto_metal_line_type.AutoMetalLineType",
"url":121,
"doc":"Registry for auto metal line type, used in fp.Linked / fp.LinkBetween. Usage: (see gpdk.technology.auto_metal_line_type)   from fnpcell.pdk.technology import all as fpt from gpdk.technology import get_technology, MetalLineType def _mt(line_width: Optional[float] = None, line_style: Optional[IMetalLineStyle] = None): if line_width is None: line_width = TECH.METAL.DEFAULT_LINE_WIDTH return MetalLineType.MT(line_width=line_width, line_layout_style=line_style) auto_metal_line_type = fpt.AutoMetalLineType() auto_metal_line_type += TECH.LAYER.MT_DRW, _mt  "
},
{
"ref":"fnpcell.pdk.technology.auto_metal_line_type.AutoMetalLineType.get",
"url":121,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.auto_metal_line_type.AutoMetalLineType.updated",
"url":121,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.auto_transition",
"url":122,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.auto_transition.AutoTransition",
"url":122,
"doc":"Registry for auto transition, used in fp.Linked / fp.LinkBetween / fp.LinkSmooth. Usage: (see  gpdk.technology.auto_transition )   from fnpcell.pdk.technology import all as fpt from gpdk.technology import WaveguideType from gpdk.components.transition.swg2mwg_transition import SWG2MWGTransition def _swg2mwg(types: Tuple[fpt.IWaveguideType, fpt.IWaveguideType]): return SWG2MWGTransition(name=\"auto\", swg_length=10, mwg_length=10, swg_type=types[0], mwg_type=types[1]) auto_transition = fpt.AutoTransition() auto_transition += WaveguideType.SWG.C >> WaveguideType.MWG.C, _swg2mwg  "
},
{
"ref":"fnpcell.pdk.technology.auto_transition.AutoTransition.DEFAULT",
"url":122,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.auto_transition.AutoTransition.get",
"url":122,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.auto_transition.AutoTransition.updated",
"url":122,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.auto_transition.LossIndex",
"url":122,
"doc":"Define auto LossIndex. Usage: gpdk/technology/auto_transition.py"
},
{
"ref":"fnpcell.pdk.technology.auto_vias",
"url":123,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.auto_vias.AutoVias",
"url":123,
"doc":"Registry for auto transition, used in fp.Linked / fp.LinkBetween / fp.LinkSmooth. Usage: (see  gpdk.technology.auto_transition )   from fnpcell.pdk.technology import all as fpt from gpdk.technology import WaveguideType from gpdk.components.transition.swg2mwg_transition import SWG2MWGTransition def _swg2mwg(types: Tuple[fpt.IMetalLineType, fpt.IMetalLineType]): return SWG2MWGTransition(name=\"auto\", swg_length=10, mwg_length=10, swg_type=types[0], mwg_type=types[1]) auto_transition = fpt.AutoVias() auto_transition += WaveguideType.SWG.C >> WaveguideType.MWG.C, _swg2mwg  "
},
{
"ref":"fnpcell.pdk.technology.auto_vias.AutoVias.DEFAULT",
"url":123,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.auto_vias.AutoVias.get",
"url":123,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.auto_vias.AutoVias.updated",
"url":123,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.bands",
"url":124,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.bands.BandEnum",
"url":124,
"doc":"Base class of Band as band's container."
},
{
"ref":"fnpcell.pdk.technology.bands.Band",
"url":124,
"doc":"Band(value: Tuple[int, int], description: str)"
},
{
"ref":"fnpcell.pdk.technology.bands.Band.value",
"url":124,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.bands.Band.description",
"url":124,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.bands.Band.name",
"url":124,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.bands.Band.order",
"url":124,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.cd_bias",
"url":125,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.cd_bias.new_cdbias_linear",
"url":125,
"doc":"Create a new linear cd bias. Usage: CDBiasLinear(0.1) or CDBiasLinear([(0.4, 0.1), (0.6, 0.15)]) if use CDBiasLinear([(0.4, 0.1), (0.6, 0.15)]) means core_width \u2208 [0.4,0.6] 0.1 used core_width>0.6 0.15 used.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.cd_bias.CDBiasLinear",
"url":125,
"doc":"Define CDBiasLinear."
},
{
"ref":"fnpcell.pdk.technology.cd_bias.CDBiasLinear.bias_stops",
"url":125,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.FillPattern",
"url":126,
"doc":"An enumeration."
},
{
"ref":"fnpcell.pdk.technology.display.FillPattern.HOLLOW",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.FillPattern.SOLID",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.FillPattern.DOTTED",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.FillPattern.DIAGONAL",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.FillPattern.BACK_DIAGONAL",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.FillPattern.GRID",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.Color",
"url":126,
"doc":"Built-in immutable sequence. If no argument is given, the constructor returns an empty tuple. If iterable is specified the tuple is initialized from iterable's items. If the argument is a tuple, the return value is the same object."
},
{
"ref":"fnpcell.pdk.technology.display.Color.with_alpha",
"url":126,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor",
"url":126,
"doc":"An enumeration."
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.BLACK",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.NAVY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.BLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.GREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.TEAL",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKCYAN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DEEPSKYBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKTURQUOISE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMSPRINGGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SPRINGGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.CYAN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MIDNIGHTBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DODGERBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTSEAGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.FORESTGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SEAGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKSLATEGRAY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIMEGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMSEAGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.TURQUOISE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.ROYALBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.STEELBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKSLATEBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMTURQUOISE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.INDIGO",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKOLIVEGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.CADETBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.CORNFLOWERBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.REBECCAPURPLE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMAQUAMARINE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DIMGRAY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SLATEBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.OLIVEDRAB",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SLATEGRAY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTSLATEGRAY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMSLATEBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LAWNGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.CHARTREUSE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.AQUAMARINE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MAROON",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PURPLE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.OLIVE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.GRAY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SKYBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTSKYBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.BLUEVIOLET",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKRED",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKMAGENTA",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SADDLEBROWN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKSEAGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMPURPLE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKVIOLET",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PALEGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKORCHID",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.YELLOWGREEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SIENNA",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.BROWN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKGRAY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.GREENYELLOW",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PALETURQUOISE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTSTEELBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.POWDERBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.FIREBRICK",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKGOLDENROD",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMORCHID",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.ROSYBROWN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKKHAKI",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SILVER",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MEDIUMVIOLETRED",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.INDIANRED",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PERU",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.CHOCOLATE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.TAN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTGRAY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.THISTLE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.ORCHID",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.GOLDENROD",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PALEVIOLETRED",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.CRIMSON",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.GAINSBORO",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PLUM",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.BURLYWOOD",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTCYAN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LAVENDER",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKSALMON",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.VIOLET",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PALEGOLDENROD",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTCORAL",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.KHAKI",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.ALICEBLUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.HONEYDEW",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.AZURE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SANDYBROWN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.WHEAT",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.BEIGE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.WHITESMOKE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MINTCREAM",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.GHOSTWHITE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SALMON",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.ANTIQUEWHITE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LINEN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTGOLDENRODYELLOW",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.OLDLACE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.RED",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.FUCHSIA",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MAGENTA",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DEEPPINK",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.ORANGERED",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.TOMATO",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.HOTPINK",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.CORAL",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.DARKORANGE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTSALMON",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.ORANGE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTPINK",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PINK",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.GOLD",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PEACHPUFF",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.NAVAJOWHITE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MOCCASIN",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.BISQUE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.MISTYROSE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.BLANCHEDALMOND",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.PAPAYAWHIP",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LAVENDERBLUSH",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SEASHELL",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.CORNSILK",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LEMONCHIFFON",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.FLORALWHITE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.SNOW",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.YELLOW",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.LIGHTYELLOW",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.IVORY",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.NamedColor.WHITE",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.LayerFill",
"url":126,
"doc":"LayerFill(color: fnpcell.pdk.technology.display.Color, pattern: fnpcell.pdk.technology.display.FillPattern)"
},
{
"ref":"fnpcell.pdk.technology.display.LayerFill.color",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.LayerFill.pattern",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.LayerStroke",
"url":126,
"doc":"LayerStroke(width: float, color: fnpcell.pdk.technology.display.Color)"
},
{
"ref":"fnpcell.pdk.technology.display.LayerStroke.width",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.LayerStroke.color",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.LayerStyle",
"url":126,
"doc":"LayerStyle(fill: fnpcell.pdk.technology.display.LayerFill, stroke: fnpcell.pdk.technology.display.LayerStroke)"
},
{
"ref":"fnpcell.pdk.technology.display.LayerStyle.fill",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.LayerStyle.stroke",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.LayerStyleSet",
"url":126,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.display.LayerStyleSet.get",
"url":126,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.display.LayerStyleSet.updated",
"url":126,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.display.LayerStyleSet.random",
"url":126,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.gds_font",
"url":127,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.gds_font.import_gds_font",
"url":127,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.gds_font.GDSFontMeta",
"url":127,
"doc":"type(object_or_name, bases, dict) type(object) -> the object's type type(name, bases, dict) -> a new type"
},
{
"ref":"fnpcell.pdk.technology.interfaces",
"url":128,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.interfaces.EnumMeta",
"url":128,
"doc":"type(object_or_name, bases, dict) type(object) -> the object's type type(name, bases, dict) -> a new type"
},
{
"ref":"fnpcell.pdk.technology.layers",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.ProcessEnum",
"url":129,
"doc":"Base class of PROCESS that contains all kinds of processes."
},
{
"ref":"fnpcell.pdk.technology.layers.PurposeEnum",
"url":129,
"doc":"Base class of PURPOSE that contains all kinds of purposes."
},
{
"ref":"fnpcell.pdk.technology.layers.LayerEnum",
"url":129,
"doc":"Base class of LAYER that contains all kinds of layers."
},
{
"ref":"fnpcell.pdk.technology.layers.Process",
"url":129,
"doc":"Define process."
},
{
"ref":"fnpcell.pdk.technology.layers.Process.name",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Process.value",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Process.description",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Process.order",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Purpose",
"url":129,
"doc":"Define purpose."
},
{
"ref":"fnpcell.pdk.technology.layers.Purpose.name",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Purpose.value",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Purpose.description",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Purpose.order",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Layer",
"url":129,
"doc":"Define layer. process such as FWG. purpose such as DRW."
},
{
"ref":"fnpcell.pdk.technology.layers.Layer.name",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Layer.process",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Layer.purpose",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Layer.description",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Layer.order",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.layers.Layer.value",
"url":129,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.link_between",
"url":130,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween",
"url":130,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween.start",
"url":130,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween.end",
"url":130,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.WaveguideBetween.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween",
"url":130,
"doc":"Interface of CellRef"
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween.start",
"url":130,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween.end",
"url":130,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween.scaled",
"url":10,
"doc":"scaled at center.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween.rotated",
"url":10,
"doc":"Return a new cell reference rotated, either degrees or radians must be provided. If both provided, radians is used. Rotation origin can be provided too.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween.translated",
"url":10,
"doc":"Translated.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween.h_mirrored",
"url":10,
"doc":"Horizontal mirrored",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween.v_mirrored",
"url":10,
"doc":"Vertical mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.link_between.MetalLineBetween.c_mirrored",
"url":10,
"doc":"Center mirrored.",
"func":1
},
{
"ref":"fnpcell.pdk.technology.metal",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal.MetalLineTypeMeta",
"url":131,
"doc":"Metaclass for unique values."
},
{
"ref":"fnpcell.pdk.technology.metal.MetalLineType",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal.MetalLineType.line_width",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal.MetalLineType.ports",
"url":131,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.metal.ProfileMetalLineType",
"url":131,
"doc":"Providing overridable  profile property to express the structure of a metal line. Attributes: profile: readonly. Structure: [ (offset0, [width00, width01,  .]), (offset1, [width10, width11,  .]), ] where  offset0 ,  offset1 ,  . are offset to the curve, positive value means offset towards the left-side, negative value means offset towards the right-side  width00 ,  width01 ,  . are widths and the largest width is used to draw, others are used to generate on-grid-fixing points."
},
{
"ref":"fnpcell.pdk.technology.metal.ProfileMetalLineType.line_width",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal.ProfileMetalLineType.profile",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal.CurvePaintMetalLineType",
"url":131,
"doc":"CurvePaintMetalLineType( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.pdk.technology.metal.CurvePaintMetalLineType.curve_paint",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal.CurvePaintMetalLineType.initial_type",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal.CurvePaintMetalLineType.final_type",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal.CurvePaintMetalLineType.port_names",
"url":131,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal_stack",
"url":132,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal_stack.MetalStack",
"url":132,
"doc":"MetalStack( , layers: Iterable[fnpcell.interfaces.ILayer], connectivity: Mapping[fnpcell.interfaces.ILayer, Iterable[fnpcell.interfaces.ILayer )"
},
{
"ref":"fnpcell.pdk.technology.metal_stack.MetalStack.layers",
"url":132,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal_stack.MetalStack.connectivity",
"url":132,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.metal_stack.MetalStack.is_metal",
"url":132,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.metal_stack.MetalStack.via_layer",
"url":132,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.registry",
"url":133,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.registry.register_technology",
"url":133,
"doc":"Register technology as the current technology. Usage: (gpdk/technology/__init__.py)   from .tech import TECH as _TECH register_technology(_TECH)  ",
"func":1
},
{
"ref":"fnpcell.pdk.technology.registry.get_technology",
"url":133,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.registry.grid_unit",
"url":133,
"doc":"Returns grid of current technology in meters",
"func":1
},
{
"ref":"fnpcell.pdk.technology.registry.user_unit",
"url":133,
"doc":"Returns user unit of current technology in meters",
"func":1
},
{
"ref":"fnpcell.pdk.technology.registry.angle_step",
"url":133,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.registry.snap_scale",
"url":133,
"doc":"Returns snap scale (=round(1 / grid_unit( / round(1 / user_unit( ) in current technology",
"func":1
},
{
"ref":"fnpcell.pdk.technology.tech",
"url":134,
"doc":"Typingfix for get_technology, mainly internal"
},
{
"ref":"fnpcell.pdk.technology.tech.IMetrics",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IMetrics.GRID",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IMetrics.UNIT",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IMetrics.ANGLE_STEP",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IMetal",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IMetal.DEFAULT_LINE_WIDTH",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IMetal.from_single_layer",
"url":134,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.tech.IPin",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPin.ICON_LAYER",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPin.TEXT_LAYER",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPin.LENGTH",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPin.OFFSET",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPort",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPort.ICON_LAYER",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPort.TEXT_LAYER",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPort.LENGTH",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IPort.OFFSET",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ILabel",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ILabel.FONT",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ILabel.FONT_SIZE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ILabel.BASELINE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IDisplay",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IDisplay.LAYER_STYLE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IDevice",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IDevice.BAND_LAYER",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IDevice.band_annotation",
"url":134,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.tech.IVias",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IVias.TOP_SHAPE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IVias.VIA_SHAPE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IVias.BOTTOM_SHAPE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IVias.SPACING",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IGdsii",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IGdsii.MAX_COORDINATES",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IAutoTransition",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IAutoTransition.DEFAULT",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IAutoVias",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.IAutoVias.DEFAULT",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ILinkingPolicy",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ILinkingPolicy.DEFAULT",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.GDSII",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.METRICS",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.PIN",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.PORT",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.LABEL",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.PROCESS",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.PURPOSE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.LAYER",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.DEVICE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.BAND",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.WG",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.METAL",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.VIAS",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.DISPLAY",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.AUTO_TRANSITION",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.AUTO_VIAS",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.AUTO_METAL_LINE_TYPE",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.LINKING_POLICY",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.tech.ITech.FITTING_FUNCTION",
"url":134,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.WaveguideTypeMeta",
"url":135,
"doc":"Metaclass for unique values."
},
{
"ref":"fnpcell.pdk.technology.wg.WaveguideType",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.WaveguideType.straight_factory",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.WaveguideType.bend_factory",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.WaveguideType.port_names",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.WaveguideType.ports",
"url":135,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.wg.ProfileWaveguideType",
"url":135,
"doc":"Providing overridable  profile property to express the structure of a waveguide Attributes: profile: readonly. Structure: [ (layer0, [ (offset00, [width000, width001,  .], (start_extension00, end_extension00 , (offset01, [width010, width011,  .], (start_extension01, end_extension01 , ]), (layer1, [ (offset10, [width101, width101,  .], (start_extension10, end_extension10 ]), ] where  layer0 ,  layer1 ,  . are layers to draw,  offset00 ,  offset01 ,  . are offset to the curve, positive value means offset towards the left-side, negative value means offset towards the right-side  width000 ,  width001 ,  . are widths and the largest width is used to draw, others are used to generate on-grid-fixing points.  start_extension00 ,  end_extension01 ,  . are extension lengths for the curve/waveguide."
},
{
"ref":"fnpcell.pdk.technology.wg.ProfileWaveguideType.straight_factory",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.ProfileWaveguideType.bend_factory",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.ProfileWaveguideType.port_names",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.ProfileWaveguideType.profile",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.ProfileWaveguideType.tapered",
"url":135,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.wg.CurvePaintWaveguideType",
"url":135,
"doc":"CurvePaintWaveguideType( args: Any,  kwargs: Any)"
},
{
"ref":"fnpcell.pdk.technology.wg.CurvePaintWaveguideType.curve_paint",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.CurvePaintWaveguideType.initial_type",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.CurvePaintWaveguideType.final_type",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.CurvePaintWaveguideType.port_names",
"url":135,
"doc":""
},
{
"ref":"fnpcell.pdk.technology.wg.CurvePaintWaveguideType.band",
"url":135,
"doc":"",
"func":1
},
{
"ref":"fnpcell.pdk.technology.wg.CurvePaintWaveguideType.port_width",
"url":135,
"doc":"",
"func":1
},
{
"ref":"fnpcell.polyfill",
"url":136,
"doc":"A polyfill module fixing some typing issues (which is fixed in python 3.9+) in python 3.8"
},
{
"ref":"fnpcell.polyfill.install",
"url":136,
"doc":"",
"func":1
},
{
"ref":"fnpcell.processors",
"url":137,
"doc":""
},
{
"ref":"fnpcell.processors.matplotlib_shower",
"url":138,
"doc":""
},
{
"ref":"fnpcell.processors.matplotlib_shower.MatplotlibShower",
"url":138,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"fnpcell.processors.matplotlib_shower.MatplotlibShower.push_ctm",
"url":138,
"doc":"",
"func":1
},
{
"ref":"fnpcell.processors.matplotlib_shower.MatplotlibShower.pop_ctm",
"url":138,
"doc":"",
"func":1
},
{
"ref":"fnpcell.processors.matplotlib_shower.MatplotlibShower.toplevel",
"url":138,
"doc":"",
"func":1
},
{
"ref":"fnpcell.processors.matplotlib_shower.MatplotlibShower.enter",
"url":138,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"fnpcell.processors.matplotlib_shower.MatplotlibShower.exit",
"url":138,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"fnpcell.processors.matplotlib_shower.MatplotlibShower.show",
"url":138,
"doc":"",
"func":1
},
{
"ref":"fnpcell.processors.port_owner_checker",
"url":139,
"doc":""
},
{
"ref":"fnpcell.processors.port_owner_checker.PortOwnerChecker",
"url":139,
"doc":"An IProcessor processes hierarchical targets in a deep first manner We use processors to plot, export_gds  ."
},
{
"ref":"fnpcell.processors.port_owner_checker.PortOwnerChecker.enter",
"url":139,
"doc":"Called before processing a target. Return True to continue processing child content. False to stop here and run exit for the target",
"func":1
},
{
"ref":"fnpcell.processors.port_owner_checker.PortOwnerChecker.exit",
"url":139,
"doc":"Called after processing a target.",
"func":1
},
{
"ref":"fnpcell.resource",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.OpenMode",
"url":140,
"doc":"An enumeration."
},
{
"ref":"fnpcell.resource.OpenMode.READ",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.OpenMode.TRUNCATE",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.OpenMode.UPDATE",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.OpenMode.APPEND",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.OpenMode.NEW",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.BinaryResource",
"url":140,
"doc":"BinaryIO. Args: filename:  filename will be resolve as relative path from current pcell's defining folder Usage:   from fnpcell import all as fp with fp.BinaryResource(\"test.gds\", mode=fp.OpenMode.TRUNCATE) as io: io.write(b\"abcdefg\")  "
},
{
"ref":"fnpcell.resource.BinaryResource.mode",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.TextResource",
"url":140,
"doc":"TextIO. Args: filename:  filename will be resolve as relative path from current pcell's defining folder Usage:   from fnpcell import all as fp with fp.TextResource(\"test.txt\", mode=fp.OpenMode.TRUNCATE) as io: io.write(\"abcdefg\")  "
},
{
"ref":"fnpcell.resource.TextResource.mode",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.ResourceRoot",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.ResourceRoot.value",
"url":140,
"doc":""
},
{
"ref":"fnpcell.resource.ResourceRoot.current",
"url":140,
"doc":"",
"func":1
},
{
"ref":"fnpcell.resource.ResourceRoot.set_current",
"url":140,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform",
"url":141,
"doc":"Affine2D transformations"
},
{
"ref":"fnpcell.transform.Affine2D",
"url":141,
"doc":"Affine2D transformation matrix. Usage:   from fnpcell import all as fp t = fp.translate(10, 0) r = fp.rotate(degrees=30) transform = t @ r assert transform  fp.translate(10, 0).rotate(degrees=30) points = [(0, 0), (1, 0), (1, 1)] transformed_points = transform(points)  equals to transform.transform_points(points)  "
},
{
"ref":"fnpcell.transform.Affine2D.m11",
"url":141,
"doc":""
},
{
"ref":"fnpcell.transform.Affine2D.m12",
"url":141,
"doc":""
},
{
"ref":"fnpcell.transform.Affine2D.m21",
"url":141,
"doc":""
},
{
"ref":"fnpcell.transform.Affine2D.m22",
"url":141,
"doc":""
},
{
"ref":"fnpcell.transform.Affine2D.m31",
"url":141,
"doc":""
},
{
"ref":"fnpcell.transform.Affine2D.m32",
"url":141,
"doc":""
},
{
"ref":"fnpcell.transform.Affine2D.determinant",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.inverse",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.scale",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.rotate",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.h_mirror",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.v_mirror",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.c_mirror",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.translate",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.decompose",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.translation",
"url":141,
"doc":""
},
{
"ref":"fnpcell.transform.Affine2D.transform_points",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.transform_point",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.transform_angle",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.identity",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.new",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.is_identity",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.is_nonidentity",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.Affine2D.is_safe_transform",
"url":141,
"doc":"",
"func":1
},
{
"ref":"fnpcell.transform.translate",
"url":141,
"doc":"Translate.",
"func":1
},
{
"ref":"fnpcell.transform.scale",
"url":141,
"doc":"Scale at center.",
"func":1
},
{
"ref":"fnpcell.transform.rotate",
"url":141,
"doc":"Rotated at center anticlockwise.",
"func":1
},
{
"ref":"fnpcell.transform.h_mirror",
"url":141,
"doc":"Horizontal mirror.",
"func":1
},
{
"ref":"fnpcell.transform.v_mirror",
"url":141,
"doc":"Vertical mirror.",
"func":1
},
{
"ref":"fnpcell.transform.c_mirror",
"url":141,
"doc":"Center mirror.",
"func":1
},
{
"ref":"fnpcell.unique_meta",
"url":142,
"doc":""
},
{
"ref":"fnpcell.unique_meta.UniqueMeta",
"url":142,
"doc":"Metaclass for unique values."
}
]